==============
Zope 3 schemas
===============

Zope 3 schema is database-neutral and form library-neutral way to describe Python data models.
Various Plone form engines use `zope.schema <http://pypi.python.org/pypi/zope.schema>`_ package to describe data structures.

The schema is model describing how data is stored. Usually form fields can be generated based on this model.

* `Dexterity field list <http://plone.org/products/dexterity/documentation/manual/developer-manual/reference/referencemanual-all-pages>`_.

* `Stock Zope schema field list <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/index.html>`_ and `more <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_bootstrapfields/index.html>`_.

Field constructor parameters
============================

Field base class defines list of standard parameters you can use to construct schema fields.
Each field subclass have its own set of possible parameters on the top of this.

See full list `here <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_bootstrapfields/Field/index.html>`_.

* Title - field title as unicode string

* Description - field description as unicode string

* required - boolean, whether the field is required

* etc.

Persistent objects and schema
=============================

ZODB persistent objects do not provide facilities for setting field defaults or validating the data input.

When you create a persistent class, you need to provide field properties for it, which will sanify
the incoming and outgoing data.

When the persistent object is created it has no attributes. When you try to access
the attribute through a named zope.schema.fieldproperty.FieldProperty accessor
it first checks the existing of the attribute. If attribute is not there,
it is created and the default value is returned.

Example::

	from persistent import Persistent
	from zope import schema
	from zope.interface import implements, alsoProvides
	from zope.component import adapts
	from zope.schema.fieldproperty import FieldProperty

	...

	class IHeaderBehavior(form.Schema):
		""" Sample schema """
	    inheritable = schema.Bool(title=u"Inherit header", description=u"This header is visible on child content", required=False, default=False)

	    block_parents = schema.Bool(title=u"Block parent headers", description=u"Do not show parent headers for this content", required=False, default=False)

	    # Contains list of HeaderAnimation objects
	    alternatives = schema.List(title=u"Available headers and animations",
	                               description=u"Headers and animations uploaded here",
	                               required=False,
	                               default=[],
	                               value_type=schema.Object(IHeaderAnimation)
	                               )

	alsoProvides(IHeaderAnimation, form.IFormFieldProvider)


	class HeaderBehavior(Persistent):
	    """ Sample persistent object for the schema """
	    implements(IHeaderBehavior)

	    #
	    # zope.schema magic happens here - see FieldProperty!
	    #

	    # We need to declare field properties so that objects will
	    # have input data validation and default values taken from schema above
	    inheritable = FieldProperty(IHeaderBehavior["inheritable"])
	    block_parents = FieldProperty(IHeaderBehavior["block_parents"])
	    alternatives = FieldProperty(IHeaderBehavior["alternatives"])

Now you see the magic::

	header = HeaderBehavior()
	# it hits alternatives accessor which returns the default value which is empty list
	assert header.alternatives = []

Collections
============

Collections are fields çomposed of several other fields.

For more information see

* Collections bit in `zope.schema documentation <http://apidoc.zope.org/++apidoc++/Code/zope/schema/fields.txt/index.html>`_

* Schema `field sources documentation <http://apidoc.zope.org/++apidoc++/Code/zope/schema/sources.txt/index.html>`_

* `Choice field <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/Choice/index.html>`_

* `List field <http://apidoc.zope.org/++apidoc++/Code/zope/schema/_field/List/index.html>`_.

List example
------------

Create list of custom objects. Note that this field cannot be edited in the form directly.

Example:

	class IHeaderBehavior(form.Schema):
		...

	    # Contains list of HeaderAnimation objects
	    alternatives = schema.List(title=u"Available headers and animations",
	                               description=u"Headers and animations uploaded here",
	                               required=False, default=[],
	                               value_type=schema.Object()
	                               )

Files
=====

* `plone.namedfield BLOB support <http://svn.plone.org/svn/plone/plone.namedfile/trunk/plone/namedfile/>`_ and
  `plone.formwidget.namefield File upload and download <http://svn.plone.org/svn/plone/plone.formwidget.namedfile/trunk/plone/formwidget/namedfile/widget.txt>`_.

If you are not storing NamedFile objects directly in content objects, you might need to create a
special publisher which makes files available from some URL.

* See `plone.namedfile.browser <http://svn.plone.org/svn/plone/plone.namedfile/trunk/plone/namedfile/browser.py>`_.

* See `plone.formwidget.namedfile.widget <http://svn.plone.org/svn/plone/plone.formwidget.namedfile/trunk/plone/formwidget/namedfile/widget.py>`_.



