=========
z3c.form
=========

`z3c.form <http://pypi.python.org/pypi/z3c.form/>`_ is generic, very flexible and very complex form library for Python.
`plone.app.z3cform <http://pypi.python.org/pypi/plone.app.z3cform>`_ and
`plone.z3cform <http://pypi.python.org/pypi/plone.z3cform>`_
provide Plone adaptions of this library.

Read each package tutorials before proceeding.

* `plone.z3cform source <http://svn.zope.org/plone.z3cform/trunk/plone/z3cform/>`_

* `plone.app.z3cform source <http://svn.plone.org/svn/plone/plone.app.z3cform/trunk/>`_.

* `collective <http://svn.plone.org/svn/collective/>`_ has several components for z3c.form,
  find by z3cform in their name.

Examining current widgets
-------------------------

Example::

	from z3c.form import form

	class MyForm(form.Form):

	    def updateWidgets(self):
	        """ Customize widget options before rendering the form. """
	        form.Form.updateWidgets(self)

	        # Dump out all widgets - note that each <fieldset> is a subform and this function only
	        # concerns the current fieldset
	        for i in self.widgets.items():
	        	print i



Creating forms dynamically
--------------------------

z3c.form assumes you have a static schema which you turn to a form. Always this is not the case and you might need to generate forms dynamically.

Getting group name
------------------

Form
----

Setting form status message
===========================

Form global status message tells whether the form action succeeded or not.

Form status message will be rendered only on the form.
If you want to set a message which will be visible even if the user renders other page after form,
you need to use Products.statusmessage.

To set the form status message::

	form.status = u"My message"

Fields
------

Field is responsible for 1) prepopulating form values from context 2) storing data to context after succesful POST.

Form fields are stored in form.fields variable which is instance of Fields class (ordered dictionary like).

Creating a field
================

Fields are created by adapting one or more zope.schema fields for z3c.form using Fields() constructor.

Example of creating one field::

		schema_field = zope.schema.TextLine()
        form_fields = z3c.form.field.Fields(schema_field)
        one_form_field = zfields.values()[0]

Adding a field to a form
========================

Use overridden += operator. Fields instances can be added to the existing Fields instances.

Example::

	self.form.fields += z3c.form.Fields(schema_field)

Modifying a field
=================

Fields can be accessed by their name in form.fields. Example::

	self.form.fields["myfieldname"].name = u"Foobar"

Accesing schema of the field
============================

zope.schema Field is stored as a *field* attribute of a field. Example::

	textline = self.form.fields["myfieldname"].field # zope.schema.TextLine

Widgets
=======

Widget is responsible for 1) rendering HTML code for input 2) parsing HTTP post input.

Widgets are stored as widgets attribute of a form. It is presented by ordered dict like Widgets class.

Widgets are not available until form's update() and updateWidgets() methods have been called.
updateWidgets() will bind() widgets to the form context. For example, vocabularies defined by
name are resolved in this point.

Widget has two names:

	* widget.__name__ is the name of the corresponding field. Look ups from form.widgets[] can be done using this name.

	* widget.name is the decorated name used in HTML code. It is in format ${form name}.${field set name}.${widget.__name__}.


Zope publisher will also mangle widget names based on what kind of input the widget takes. When HTTP POST request comes in,
Zope publisher automatically converts <select> dropdowns to lists and so on.

Accessing a widget
==================

Widget can be accessed by its field's name. Example::

	class MyForm(z3c.form.Form):

		def update(self):
			z3c.form.Form.update(self)
			widget = form.widgets["myfieldname"] # Get one wiget

			for w in wiget.items(): print w # Dump all widgets

Modifying a widget
==================

Widgets are stored in form.widgets dictionary. Mapping is field name -> widget. Widget label can be different than field name.

Example::


	from z3c.form import form

	class MyForm(form.Form):

	    def updateWidgets(self):
	        """ Customize widget options before rendering the form. """

			self.widgets["myfield"].label = u"Foobar"

Widget save
===========

By default widgets use datamanger.AttributeField and tries to store its value as a member attribute of the form context object.

TODO: How do add custom DataManager

Adding a CSS class
==================

Widgets have a method addClass() to add extra CSS classes. This is useful if you have
Javascript/JQuery associated with your special form::

	widget.addClass("myspecialwidgetclass")

Note that these classes are directly applied to <input>, <select> etc. itself and
not the wrapping <div> element.

Accesing schema of the field
============================

zope.schema Field is stored as a *field* attribute of a widget. Example::

	textline = form.widgets["myfieldname"].field # zope.schema.TextLine

**widget.field is not z3c.form.field.Field object**.

Getting selection widget vocabulary value as human readable text
================================================================

Example::

	widget = self.widgets["myselectionlist"]

	token = widget.value[0] # widget.value is list of unicode strings, each is token for the vocabulary

	user_readable = widget.terms.getTermByToken(token).title

Example (page template)::

	<td tal:define="widget view/widgets/myselectionlist">
    	<span tal:define="token python:widget.value[0]" tal:content="python:widget.terms.getTermByToken(token).title" />
   	</td>


Customizing form frame
-----------------------

If you want to change the surroundings around the z3c.form form, like Plone main template,
text above and below the form, you can do as in the following example::

	from Products.Five.browser import BrowserView
	from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile

	from plone.directives import form
	from plone.z3cform.layout import FormWrapper, wrap_form

	class EditHeaderBehaviorForm(form.EditForm):
	    """ Form which displays options to edit header animation.

	    """
		...

	class EditHeaderBehaviorView(FormWrapper):
	    """ Render Plone frame around our form with little modifications """

		# We need to define form and index attributes for custom FormWrapper

		# form points to our Form class
	    form = EditHeaderBehaviorForm

		# Index is Zope 2 page template file which renders the frame around the form
	    index = FiveViewPageTemplateFile("edit_header.pt")


	    def __init__(self, context, request):
			# We can optionally set some variables in the constructor
	        FormWrapper.__init__(self, context, request)
	        self.header_animation_helper = self.context.restrictedTraverse("@@header_animation_helper")

		# Our view exposes two custom functions to the template

	    def getAnimationCount(self):
	        """ Return how many animations are availabe in the context """
	        return len(self.header_animation_helper.header.alternatives)

	    def getHeadeDefiner(self):
	        """ Return the parent object defining animations in this context """
	        return self.header_animation_helper.defining_context

And corresponding template edit_header.pt::

	<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
	      xmlns:tal="http://xml.zope.org/namespaces/tal"
	      xmlns:metal="http://xml.zope.org/namespaces/metal"
	      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
	      lang="en"
	      metal:use-macro="here/main_template/macros/master"
	      i18n:domain="plone.app.headeranimation">
	<body>

	  <metal:main fill-slot="main">
	    <tal:main-macro metal:define-macro="main">

	      <h1 class="documentFirstHeading" tal:content="view/label">Title</h1>

	      <div id="skel-contents">
	        <span tal:replace="structure view/contents" />
	      </div>


		  <!-- Custom section goes here below the form -->

		  <h2>Available animations</h2>

		  <div id="animations">
		  	<span>
		  		We have <b tal:content="view/getAnimationCount"> animations or images</b>
				defined by <a tal:attributes="href view/getHeaderDefiner/absolute_url" tal:content="view/getHeadeDefiner/title_or_id" />
			</span>
		  </div>

	    </tal:main-macro>
	</metal:main>


CRUD form
---------

CRUD (Create, read, update, delete) forms manage list of objects.

Glossary

* Add form creates new objects

* Edit sub-form edits existing object

* Edit form lists all objects and allows deleting them

* CRUD form orchestrates the whole thing and renders add and edit forms

Notes: context attribute of add and edit form is the parent CRUD form. Context attribute of edit sub form
is the edit form.

Examples
========

* Easy: `plone.app.headeranimation animation and image list manager <>`_.

* Complex: `Singing & dancing channel manager example <https://svn.plone.org/svn/collective/collective.dancing/trunk/collective/dancing/browser/channel.py>`_






