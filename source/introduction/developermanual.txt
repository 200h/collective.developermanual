====================================================================
 How to upload Plone community developer documentation to Plone CMS
====================================================================

.. admonition:: Description

        This document explain integrating Sphinx and Plone,
        and uses Plone Community Developer Manual and plone.org 
        site as an example.

.. contents :: :local:

.. highlight:: console

Introduction
--------------

This concerns only those who

* Wish to generate HTML version of Plone Community Developer manual 

* Wish to upload Sphinx documentation to a Plone site

collective.developermanual
--------------------------

collective.developermanual open-for-anyone-to-edit documentation for Plone developers in Sphinx format,
living in Plone's collective Subversion version control system (anyone can get commmit access).

Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, 
written by Georg Brandl and licensed under the BSD license.

* http://sphinx.pocoo.org/

collective.developermanual contains :doc:`buildout.cfg recipes </tutorials/buildout>` to

* Install Sphinx

* Compile manual to HTML

* Upload manual to a Plone site (bin/toplone script and transmogrify source packages) 

Upload does not need any special support from Plone site to accept Sphinx documentation
(besides installing Plone Help Center, but pipeline can be configured to use Folders and Pages
instead of Reference Manual content type).  

Setting up software for manual compilation and upload
-------------------------------------------------------

First you need to install Git for your operating system to be able to checkout necessary source code::

        sudo apt-get install git-core # Linux
         
or::

        sudo port install git-core # Mac

.. note:::

        You must not have Sphinx installed in your Python environment (easy_install).
        Remove it, as it will clash with the version created by buildout.
        Use virtualenv if you need to have Sphinx around for other projects.
                
Run buildout to install Sphinx and necessary packages to upload the::

        # Note: You must use Python 2.4 here
        python2.4 bootstrap.py
        bin/buildout
        
This will always result to error, but bin/ folder is populated with required scripts.
Now you need to checkout all the source code using Mr. Developer tool::

        bin/develop co ""

Run buildout again::

        bin/buildout

Building static HTML with Sphinx
---------------------------------

This creates *docs/html* folder from *source* folder by compiling all collective.developermanual pages,
using sphinx-build command from buildout::

        make html 
        
If you want to build everything from the scratch, to see all warnings::

        make clean html                     

Uploading documentation to a site
---------------------------------

The collective.developer manual contains a buildout
which defines pipeline for `collective.transmogrify <http://pypi.python.org/pypi/collective.transmogrifier/>`_
to read in Sphinx generated HTML files and upload them to Plone site
as `Plone Help Center <http://plone.org/products/plonehelpcenter>`_ Reference Manual content item.

collective.transmogrify was originally developed to provide pipelines to import,
manipulate and export content. It allows you to use plug-in architecture 
to provide necessary steps, *blueprints*, to pass content in content pipeline from a filter to another.
The idea is very similar as in  video and audio codec architectures.

Blueprints can be mix-and-matched using *pipeline.cfg* configuration file.
collective.developermanual defines pipeline for crawling generated Sphinx HTML files,
breaking down the HTML to fields (title, description, body) and then uploading it to a Plone
site using Zope's XML-RPC API and URL functions, like workflow transition, exposed by Plone.
As Zope provides necessary XML-RPC facilities, specific code for the uploader is not
needed on the server running the Plone site. 
        
Setting up Plone site for uploading Sphinx documentation
=========================================================

First install Plone Help Center add-on and create *Reference Manual* 
content type at the remote site.

The documentation can be uploaded to

* Plone site

* `Plone Help Center add-on <http://plone.org/products/plonehelpcenter>`_ installed

* Sphinx specific CSS styles can be installed (optional) for source code colorization,
  warnings, notes and other mark-up in the documentation. These are included
  as sphinx.css and it is easiest to drop them to your portal_skins layer manually.

Compling HTML manual
====================

Use Sphinx makefile::

        make html

Running upload
================

Buildout generates *bin/toplone* command-line script.

Example how to upload to a local Plone instance::

        make clean html
        bin/toplone http://admin:admin@localhost:5011/foobar/knowledge-base/test/
        
Upload script will

* Is generated when you run buildout (see buildout.cfg)

* Reconfigure transmogrifier pipeline to use remote site and HTTP Basic Auth credentials
  given on the command line 

* Crawl Sphinx documentation and extract title, description and body text of each page.
  In theory you could crawl any remote web site for this. *toplone* script is 
  created to crawl local documentation only.

* Create Plone Help Center content items at the remote Plone instance using Zope's XML-RPC

* Update remote Plone items to reflect new documetation changes using Zope's XML-RPC

* Publish items and hide unnecessary items from the navigation (image source folders)

.. note ::

        Upload script does not currently purge the existing uploaded documentation.
        If pages have been renamed or moved, you need to delete the documentation
        on the target site before performing the upload. Just go to 
        Reference Manual Contents tab, select all and hit delete.

Setting up CSS 
==============

Example sphinx.css is provided with collective.developermanual

* It sets up CSS for Syntax highlighting

* It resolves some CSS class conflicts between Sphinx and Plone

sphinx.css assumes a special Sphinx *page.html* template is used.
This template is modified to wrap everything Sphinx outputs to *sphinx-content*
CSS class, so we can nicely separate them from standard Plone styles.
        
                


         
