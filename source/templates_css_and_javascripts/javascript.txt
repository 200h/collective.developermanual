==================
 Javascripting
==================

.. admonition:: Description

        How to add your own Javascript files to Plone and Plone add-on products

.. contents:: :local:

Introduction
------------

Javascripts files must be distributed to Plone

* By creating them through-the-web editor in :doc:`portal_skins </templates_css_and_javascripts/skin_layers>`. 
  are stored in ZODB in this case.
  
* By add-on products using :doc:`Zope 3 resource folders </templates_css_and_javascripts/resourcefolders>`

Then the Javascript must be registered on the site

* Through-the-web in portal_javascripts in ZMI

* Using :doc:`GenericSetup jsregistry.xml </components/genericsetup>` which
  is run (and rerun) when you use the add-on installer in the control panel  

Plone Javascripts are managed by resource registry *portal_javascripts*.
You can find this in Zope Management interface, under your portal root folder.

portal_javascript will automatically

* compress JS files

* merge JS load requests

* determine which files are included on which HTML page

* support IE conditional comments

Javascript libraries
----------------------

You can use any Javascript library with Plone.

Plone internally uses jQuery.

Creating Javascripts for Plone
------------------------------

The following ste

* Put ZMI -> portal_javascripts to debug mode

* Include new JS files 

        * Use ZCML configuration directive :doc:`resourceFolder </templates_css_and_javascripts/resourcefolders>` to
          include static media files in your add-on product
        
        * Put in new Javascript via ZMI upload (you can use Page Template type) to portal_skins/custom folder

* Register Javascript in portal_javascripts

        * Do it through-the-web using portal_javascripts ZMI user interface ...or...
        
        * Add *profiles/default/jsregistry.xml* file to describe Javascript files included with your add-on product 
       
Executing Javascript code on page load
--------------------------------------

Plone includes JQuery library which has ``ready()``
event handler to run Javascript code when DOM tree
loading is done (HTML is loaded, images and media files
are not necesssarily loaded).

Create following snippet::


    jq(document).ready(function() {
        // TODO: Execute your page manipulating Javascript code here
    });

Registering javascripts to portal_javascripts
---------------------------------------------

Javascript files need to be registered in order to appear in Plone's <html> <head>
and in the Javascript merge compositions.

Javascripts are registered to portal_javascripts tool using *profiles/default/jsregistry.xml* GenericSetup
profile file.

* `More information about jsregistry.xml <http://plone.org/documentation/manual/theme-reference/page/css/resource-registries/practical2>`_.

The following options are available

* *id* (required): URI from where the Javascript is loaded

* *expression* empty string or TAL condition which determintes whether the file is served to the user.
  The files with the same condition are grouped to the same compression bundle. For more information,
  see :doc:`expressions documentation </functionality/expressions>`.

* *authenticated* (Plone 4+) is expression override, which tells
  the load the script for authenticated users only

* *cookable* is merging of Javascript files allowed during the compression

* *inline* is script server as inline inside <script>...</script> tag

* *enabled* shortcut to disable some Javascripts

* *compression* none, safe or full. See full option list from portal_javascripts.

* *insert-before* and *insert-after* control the position of the Javascript file
  in relation to other served Javascript files

`Full description in the source code <https://svn.plone.org/svn/plone/ResourceRegistries/trunk/Products/ResourceRegistries/exportimport/resourceregistry.py>`_.

For every page
===============

Example ``profiles/default/jsregistry.xml`` in your add-on product.
This registers a Javascript which is loaded for every page.

.. code-block:: xml
        
        <?xml version="1.0"?>
        <object name="portal_javascripts">
                <javascript
                        id="++resource++plonetheme.yourproduct/cufon-yui.js"
                        cacheable="True" compression="safe" cookable="True"
                        enabled="True" expression=""  inline="False" insert-after="toc.js"/>
        </object>

For authenticated users only
=============================

The following registers two Javascript files which are aimed
to edit mode and authenticated users. The Javascript are 
added to the merge bundle and compressed, so they do not increase
the load time of the page. The files are loaded from ``portal_skins`` 
(not from resource folder) and can be referred by their direct filename -
Plone resolves portal_skins files magically for the site root and every 
folder.

.. code-block:: xml

        <?xml version="1.0"?>
        <object name="portal_javascripts">
        
        
                <javascript
                        id="json.js"
                        authenticated="True"
                        cacheable="True" compression="safe" cookable="True"
                        enabled="True" expression=""  inline="False" insert-after="tiny_mce.js"/>
                
                <javascript
                        id="orapicker.js"
                        authenticated="True"
                        cacheable="True" compression="safe" cookable="True"
                        enabled="True" expression=""  inline="False" insert-after="json.js"/>
        
        
        </object>

Bundles
=======

There are several compressed Javascript bundles cooked (compressed & merged)
from Javascript definitions automatically.

* Anonymous users (no condition)

* Logged in users (condition: not: portal/portal_membership/isAnonymousUser)

* Visual editor (Kupu) related Javascripts (condition: python:portal.kupu_library_tool.isKupuEnabled(REQUEST=request))

To inspect bundles and whether Javascripts have been registered succesfully,
go to portal_javascripts -> Merged composition tab in ZMI.

Javascript for anonymous
========================

The following example includes Javascript file intended for anonymous site users.
It is included after toc.js so that the file ends up to anonymous users compression bundle.

The Javascript file itself is in folder plonetheme/xxx/browser/scripts and it is
mapped to ++resource++plonetheme.xxx.scripts namespace using <resourceDirectotory>
ZCML directive.

If insert-after or insert-before is omitted, the script will end up as the last
of the Javascript registry.

Example *profiles/default/jsregistry.xml*

.. code-block:: xml

	<?xml version="1.0"?>
	<object name="portal_javascripts">
	    <javascript
	        id="++resource++plonetheme.xxx.scripts/cufon-yui.js"
	        cacheable="True" compression="safe" cookable="True"
	        enabled="True" expression=""  inline="False" insert-after="toc.js"/>
	</object>

The following example registers an anonymous user Javascript file, but does
no place it to the compression bundle, because it is very big and
slows down the page loading. It is placed before dropdown.js
which is the first script for logged in users.

.. code-block:: xml

    <javascript
        id="++resource++plonetheme.xxx.scripts/XXX_Script_400.font.js"
        cacheable="True" compression="none" cookable="False"
        enabled="True" expression=""  inline="False" insert-before="dropdown.js"/>

Useful out of the box Javascripts
----------------------------------

`Please read this blog post <http://www.sixfeetup.com/blog/2009/7/31/utilize-available-javascript-in-plone-without-knowing-javascript>`_.

Per folder overrides
---------------------

* http://pypi.python.org/pypi/Products.CustomOverrides


Generating Javascript dynamically
----------------------------------

TAL template language is not suitable for non-XML generation.
Use Python string templates. 

Don't put dynamically generated javascripts to ``portal_javascripts`` registry unless you want to cache them
and they do not differ by the user.

For example, see ``FacebookConnectJavascriptViewlet``

* http://svn.plone.org/svn/collective/mfabrik.like/trunk/mfabrik/like/viewlets.py

AJAX-y view loading
-------------------

Loading by page load
======================

Let's imagine we have this piece of synchronous page template code.
The code is a :doc:`view page template </views/browserviews>` code which includes another view inside it.

.. code-block:: html

       <tal:finnish condition="python:context.restrictedTraverse('@@plone_portal_state').language() == 'fi'">
               <div tal:replace="structure here/productappreciation_view" />
       </tal:finnish>
       
To make it load the view asynchronous, to be loaded with AJAX call when the page loading has been completed, you can do::

       
         <tal:finnish condition="python:context.restrictedTraverse('@@plone_portal_state').language() == 'fi'">
                
                                
                <div id="comment-placefolder">
                        
                        <!-- Display spinning AJAX indicator gif until our AJAX call completes -->
                        
                        <p class="loading-indicator">
                                <!-- Image is in Products.CMFPlone/skins/plone_images -->
                                <img tal:attributes="src string:${context/@@plone_portal_state/portal_url}/spinner.gif" /> Loading comments 
                        </p>
                        
                        <!-- Hidden link to a view URL which will render the view containing the snippet for comments -->                       
                        <a rel="nofollow" style="display:none" tal:attributes="href string:${context/absolute_url}/productappreciation_view" />
                        
                        <script>
                                
                                // Generate URL to ta view 
                                                        
                                jq(document).ready(function() {
                                        
                                        // Extract URL from HTML page
                                        var commentURL = jq("#comment-placefolder a").attr("href");
                                        
                                        if (commentURL) {
                                                // Trigger AJAX call
                                                jq("#comment-placefolder").load(commentURL);
                                        }
                                });                             
                        </script>
                </div>
                
Loading when element becomes visible
======================================

Here is another example where more page data is lazily loaded
when the user scrolls down to the page and the item becomes visible. 

.. code-block:: javascript
                                
        // Generate URL to ta view 
                                
        jq(document).ready(function() {
                
                // http://remysharp.com/2009/01/26/element-in-view-event-plugin/                                        
                jq("#comment-placeholder").bind("inview", function() {

                        // This function is executed when the placeholder becomes visible

                        // Extract URL from HTML page
                        var commentURL = jq("#comment-placeholder a").attr("href");
                                                                                                
                        if (commentURL) {
                                // Trigger AJAX call
                                jq("#comment-placeholder").load(commentURL);
                        }
                                                                
                });                                     
                
        });                             

More info

* http://blog.mfabrik.com/2011/03/09/lazily-load-elements-becoming-visible-using-jquery/

* http://remysharp.com/2009/01/26/element-in-view-event-plugin/

