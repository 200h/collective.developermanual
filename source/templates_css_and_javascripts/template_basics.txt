Preface
-------

Plone uses `TAL` template language which has `METAL <>`_ extensions for macros. TALES expressiong

Plone 3 has two kind of template

    * View page templates. They have associated *view* template variable. These templates live under browser/
      folder structure in your add-on product. You can override them by <browser:page> ZCML directive.

    * Old style page templates. They live under plone_skins structure in ZMI and. You can
      override them by register a new plone_skins layer. The most infamous of them is main_template
      which provides skeleton for all Plone themes.

See `browser:page <http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/page/index.html>`_

TAL
---

`TAL <http://wiki.zope.org/ZPT/TALSpecification14>`_ is template language used Plone.
TAL is XML based language, which puts programming logic to XML attributes.

Escaped and unescaped content
=============================

By default, all TAL output is escaped for the security reasons.

.. code-block:: python

	view.text = "<b>Test</b>"

.. code-block:: html

	<div tal:content="view/text" />
	
Will output escaped HTML source code::

	&lt;b&gt;Testlt;/b&gt;
	
Unescaped content can be outputted using tal:replace attribute and structure.

.. code-block:: html

	<div tal:replace="structure view/text" />
	
Will output unescaped HTML source code::

	<b>Test</b>

METAL
------

TALES expressions
----------------------

* string:

* nocall

* python:



Overriding templates
--------------------

# Old stype templates can be overridden by register a new skins layer in plone_skins

# New style templates can be overridden by add-on product configure.zcml using a theme layer
  or or add-on product overrides.zcml if the change is global


View page template
==================

http://lionfacelemonface.wordpress.com/2009/03/02/i-used-macros-in-my-browser-views-and-saved-a-bunch-of-money-on-my-car-insurance/

Old style page template
=======================

