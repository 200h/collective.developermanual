=============
 Portlets
=============

.. admonition:: Description

        How to create and subclass portlets in Plone. How to look-up and modify
        portlets on the site programmatically.

.. contents :: :local:

Introduction
------------

Please read `Portlets developer manual <http://plone.org/documentation/manual/portlets-developer-manual/basic-plone.portlets-architecture>`_.

Creating a portlet
------------------

* You need a paster-compatible product skeleton created using *paster create -t plone* or
  *paster create -t archetypes* commands.
  
* Use project specific paster command *paster addcontent portlet* to create a code 
  skeleton for your new portlet. 

Subclassing a portlet
---------------------

You can subclass a portlet to create a new portlet type with your enhanced functionality.

* http://plone.org/documentation/manual/developer-manual/portlets/appendix-practicals/subclassing-new-portlets

Overriding a portlet renderer
-----------------------------

* http://plone.org/documentation/manual/theme-reference/elements/portlet/override-the-portlets-in-plone-3.0

update() and render()
-----------------------

These methods should honour `zope.contentprovider.interfaces.IContentProvider call contract <http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto>`_.

available property
-------------------

The portlet renderer can define available property to hint the portlet manager when the portlet should be rendered.

Example ::

        class Renderer(base.Renderer):
        
            @property
            def available(self):
                # Show this portlet for logged in users only
                return not self.anonymous



Walking through every porlet on the site
-----------------------------------------

The following code iterates through all portlets assigned
directly to content items. This excludes dashboard, group and content type based portlets.
Then it prints some info about them and renders them.

Example code::
        
        from Products.Five.browser import BrowserView
        
        from zope.component import getUtility, getMultiAdapter
        from zope.app.component.hooks import setHooks, setSite, getSite
        
        from plone.portlets.interfaces import IPortletType
        from plone.portlets.interfaces import IPortletManager
        from plone.portlets.interfaces import IPortletAssignment
        from plone.portlets.interfaces import IPortletDataProvider
        from plone.portlets.interfaces import IPortletRenderer
        from plone.portlets.interfaces import IPortletAssignmentMapping      
        from plone.portlets.interfaces import ILocalPortletAssignable  
        
        from Products.CMFCore.interfaces import IContentish
        
        class FixPortlets(BrowserView):
                """ Magical portlet debugging view """
                
                def __call__(self):
                    """
                    """
                    
                    request = self.request
                    
                    portal = getSite()
                    
                    # Not sure why this is needed...
                    view = portal.restrictedTraverse('@@plone')
                    
                    # Query all content items on the site which can get portlets assigned
                    # Note that this should excule special, hidden, items like tools which otherwise
                    # might appearn in portal_catalog queries                       
                    all_content = portal.portal_catalog(show_inactive=True, language="ALL", object_provides=ILocalPortletAssignable.__identifier__)
                                            
                    # Load the real object instead of index stub            
                    all_content = [ content.getObject() for content in all_content ]
                    
                    # portal itself does not show up in the query above,
                    # though it might contain portlet assignments            
                    all_content = list(all_content) + [portal] 
                    
                    for content in all_content:
                                        
                            for manager_name in [ "plone.leftcolumn", "plone.rightcolumn" ]:
                            
                                    manager = getUtility(IPortletManager, name=manager_name, context=content)
                            
                                    mapping = getMultiAdapter((content, manager), IPortletAssignmentMapping)
                                                                                            
                                    # id is portlet assignment id
                                    # and automatically generated
                                    for id, assignment in mapping.items():
                                            print "Found portlet assignment:" + id + " " + str(assignment)
                                            
                                            renderer = getMultiAdapter((content, request, view, manager, assignment), IPortletRenderer)
                                            
                                            # Renderer acquisition chain must be set-up so that templates
                                            # et. al. can resolve permission inheritance
                                            renderer = renderer.__of__(content)
                                            
                                            # Seee http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto
                                            renderer.update()                                    
                                            html = renderer.render()
                                            print "Got HTML output:" + html
                                             
                                            
                    return "OK"
                    
For more information about portlet assignments and managers, see

* http://svn.plone.org/svn/plone/plone.app.portlets/trunk/plone/app/portlets/tests/test_mapping.py

* http://svn.plone.org/svn/plone/plone.app.portlets/trunk/plone/app/portlets/tests/test_traversal.py

* http://svn.plone.org/svn/plone/plone.app.portlets/trunk/plone/app/portlets/configure.zcml

* http://svn.plone.org/svn/plone/plone.portlets/trunk/plone/portlets/interfaces.py

* http://svn.zope.org/zope.contentprovider/trunk/src/zope/contentprovider/interfaces.py?rev=98212&view=auto (for portlet renderers)

Writing your own portlet manager
----------------------------------

If you need additional portlet slots at the site.

* https://weblion.psu.edu/svn/weblion/weblion/Products.ContentWellPortlets/trunk/Products/ContentWellPortlets/tests/test_setup.py
                                     
Other resources and examples
-----------------------------

* `Static text portlet <https://svn.plone.org/svn/plone/plone.portlet.static/trunk/plone/portlet/static/>`_.

* `Templated portlet <https://svn.plone.org/svn/collective/collective.easytemplate/trunk/collective/easytemplate/browser/portlets/templated.py>`_
                                     