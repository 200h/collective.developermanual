
Listing the actual folder objects
---------------------------------

Method contentItems is defined in CMFCore/PortalFolder.py.
See source code for details, e.g. filtering and other forms of listing::


	items = folder.contentItems() # return Python list of children object tuple (id, object)

**Performance warning:**
Listing objetcs like this is very very costly, since it will return the actual content objects,
not their indexed metadata from portal_catalog.
You should avoid it always as possible.

**Security warning:** folder.contentItems() returns all items regardless of the user roles

Listing folder items of certain type
-------------------------------------

Method listFolderContents retrieves the full objects in the folder (slow).
It takes contentFilter argument. contentFilter argument is a dictionary and supports "portal_type" filter,
which is a list of allowed portal types::

        # List all types in this folder whose portal_type is "CourseModulePage"

        return self.listFolderContents(contentFilter={"portal_type" : "CourseModulePage"})

**Security warning**: listFolderContens() honors the currently logged in user roles.

**Performance warning**: Slow.

Getting folder item ids
-----------------------

If you need to get ids only, use objectIds() method. This is a fast method::

	# Return a list of object ids in the folder
	ids = folder.objectIds()


Checking for the existence of a particular object id
-----------------------------------------------------

If you want to know whether the folder has a certain item or not, you can use the following snippet.

There is a special case for Large Plone Folders (BTree based).
The following is optimal code, but you can simplify it if you don't need to check if the folder is BTreeFolder::

	# Use the BTreeFolder API if possible
	myid = "index_html"

	if base_hasattr(context, 'has_key'):
	    # BTreeFolder's has_key returns numeric values
	    return context.has_key(myid) and True or False
	elif myid in context.objectIds():
	    return True
	else:
	    return False

Getting folder items using portal_catalog
-----------------------------------------

This should be your preferred method for querying folder items. portal_catalog searches are fast,
because they return catalog brain objects of real content objects (less database look ups).

This example is taken from Products.CMFPlone/skins/plone_scripts/getFolderContents::

	mtool = context.portal_membership
	cur_path = '/'.join(context.getPhysicalPath())
	path = {}

	if not contentFilter:
	    # The form and other are what really matters
	    contentFilter = dict(getattr(context.REQUEST, 'form',{}))
	    contentFilter.update(dict(getattr(context.REQUEST, 'other',{})))
	else:
	    contentFilter = dict(contentFilter)

	if not contentFilter.get('sort_on', None):
	    contentFilter['sort_on'] = 'getObjPositionInParent'

	if contentFilter.get('path', None) is None:
	    path['query'] = cur_path
	    path['depth'] = 1
	    contentFilter['path'] = path

	show_inactive = mtool.checkPermission('Access inactive portal content', context)

	# Evaluate in catalog context because some containers override queryCatalog
	# with their own unrelated method (Topics)
	contents = context.portal_catalog.queryCatalog(contentFilter, show_all=1,
	                                                  show_inactive=show_inactive)

	if full_objects:
	    contents = [b.getObject() for b in contents]

	if batch:
	    from Products.CMFPlone import Batch
	    b_start = context.REQUEST.get('b_start', 0)
	    batch = Batch(contents, b_size, int(b_start), orphan=0)
	    return batch

	return contents


 Getting raw Zope objects
 -------------------------

 This listing method applies to all `OFS.Folder.Folder objects <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_, not just Plone content objects.

 Example::

 	for id, item in folder.objectItems():
 		# id is 8-bit string of object id in the folder
 		# item is the object itself
 		pass
