===================
Fields and widgets
===================

.. admonition:: Description

        How to read, add, remove and hide fields and widgets available for Archetypes content types. 

.. contents :: :local:

Introduction
------------

This document contains instructions how to manipulate Archetypes schema.

*Schema* is list of fields associated with a content type. 
Each field can belong to one *schemata* which corresponds to one Edit tab
sub-tab in Plone user interface. 

Field schemata is chosen by setting field's ``schemata`` attribute.

Getting hold of schema objects
-------------------------------

Archetypes based data model is defined as Schema object, which is a list of fields.

During application start-up
===========================

When your class is being constructed you can refer the schema simply in Python::

        
        # Assume you have YourContentSchema object 
        print YourContentSchema.fields()
        
        class SitsCountry(ATBTreeFolder):
                schema =YourContentSchema
                
        print SitsCountry.schema.fields()
        
        
During HTTP request processing
==============================

You can access context schema object by using Schema() accessor. 

.. note:: 

        Run-time schema patching is possible, so Schema() output might 
        differ what you put in to your content type during the construction.

Example::

        schema = context.Schema()
        print schema.fields()

Schema introspection
-------------------------------

How to know what fields are available on content items.

Out of box schema source code
=================================

The default Plone schemas are defined 

Id and title fields:

* http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/BaseObject.py

Category and owners schemata: Dublin core metadata

* http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/ExtensibleMetadata.py

Settings schemata: Exclude from navigation, related items and next/previous navigation

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/schemata.py

Document content

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/document.py

Image content

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/image.py

News content

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/newsitem.py

Run-time introspection
=======================

You can get hold of content item schema and its fields as in the example below.

You can do this either in 

* :doc:`Your own BrowserView Python code </views/browserviews>`

* :doc:`pdb breakpoint </testing_and_debugging/pdb>` 

* :doc:`Command line Zope debug console </misc/commandline>`

Example::
        
        for field in context.Schema().fields():
                print "Field:" + str(field) + " value:" + str(field.get(context))

Field can be also accessed by name::
        
        field = context.Schema()["yourfieldname"]

See

* http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/Schema/__init__.py

Field name
----------

Field exposes its name through getName() attribute::

        field = context.Schema()["yourfieldname"]
        assert field.getName() == "yourfieldname"
        
Accessing Archetypes field value
--------------------------------

Accessor method
===============

Each field has accessor method. Accessor method is

    * In your content type class

    * Automatically generated if you don't give it manually

    * Has name get + schema field name with first letter uppercase. E.g. yourfield has accessor method context.getYourfield()

Raw access
==========

Archetypes has to kind of access methods

* Normal, getSomething(), which filters output

* Raw, so calle edit accessor, getSomethingRaw() which does not filter output

Indirect access
==================

You can use field.get(context) to read values of fields indirectly, without knowing the accessor method.

This example shows how to read and duplicate all values of lc object to nc::

        from Products.Archetypes import public as atapi


        nc = createObjectSomehow()
        
        # List of field names which we cannot copy
        do_not_copy = ["id"]
                
        # Duplicate field data from one object to another
        for field in lc.Schema().fields():
            name = field.getName()
            
            # ComputedFields are handled specially,
            # and UID also
            if not isinstance(field, atapi.ComputedField) and name not in do_not_copy:
                value = field.getRaw(lc)            
                newfield = nc.Schema()[name]
                newfield.set(nc, value)
     
        # Mark creation flag to be set
        nc.processForm()
            
Validating objects
------------------

Example for *nc* AT object::

        errors = {}
        nc.Schema().validate(nc, None, errors, True, True)
        if errors:
            assert not errors, "Got errors:" + str(errors)
      
Checking permissions
---------------------            

field.writeable() provides a short-cut whether the currently
logged in user can change the field value.

Example::

        field = context.Schema()["phone_number"]
        assert field.writeable(), "Cannot set phone number"

There is also a verbose debugging version which will print the reason
to log if the writeable condition is not effective::

        field = context.Schema()["phone_number"]
        assert field.writeable(debug=True), "Cannot set phone number"

Modifying all fields in schema
------------------------------

You might want to modify all schema fields based on some criteria.

Example how to hide all metadata fields::

	for f in ExperienceEducatorSchema.filterFields(isMetadata=True): f.widget.visible = { "edit" : "invisible" }
	
Reordering fields
-----------------

See moveField() in `Schema/__init__.py <http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/Schema/__init__.py>`_.

Example

.. code-block:: python


    ProductCardFolderSchema = MountPointSchema.copy() + atapi.Schema((

        # -*- Your Archetypes field definitions here ... -*-
        atapi.StringField(
            'pageTitle',
            storage=atapi.AnnotationStorage(),
            widget=atapi.StringWidget(
                label=_(u"Page title"),
                description=_(u"Title shown on the page text if differs from the navigation title"),
            ),
            default=""
        ),

       ...


    ))


    schemata.finalizeATCTSchema(
        ProductCardFolderSchema,
        folderish=True,
        moveDiscussion=False
    )

    # Reorder schema fields to the final order,
    # show special pageTitle field after actual Title field
    ProductCardFolderSchema.moveField("pageTitle", after="title")

Rendering widget
----------------

Archetypes is hardwired to render widgets from viewless TAL page templates.

Example how to render widget for field 'maintext'::

          <tal:fields tal:define="field_macro here/widgets/field/macros/view;
                                  field python:here.Schema()['maintext']">

            <tal:if_visible define="mode string:view;
                                    visState python:field.widget.isVisible(here, mode);
                                    visCondition python:field.widget.testCondition(context.aq_inner.aq_parent, portal, context);"
                            condition="python:visState == 'visible' and visCondition">
              <metal:use_field use-macro="field_macro" />
            </tal:if_visible>
          </tal:fields>

Automatically generating description based on body text
--------------------------------------------------------

Below is a sample through-the-web Python Script which
you can drop to any Plone through Zope Management Interface.

This script will provide one-time operation to automatically
generate content item descriptions based on their body text
by taking the first three sentences.

Example code::

        def create_automatic_description(content, text_field_name="text"):
            """ Creates an automatic description from HTML body by taking three first sentences. 
        
            Takes the body text
        
            @param content: Any Plone contentish item (they all have description)
        
            @param text_field_name: Which schema field is used to supply the body text (may very depending on the content type)
            """
        
            # Body is Archetype "text" field in schema by default.
            # Accessor can take the desired format as a mimetype parameter.
            # The line below should trigger conversion from text/html -> text/plain automatically using portal_transforms
            field = content.Schema()[text_field_name]
        
            # returns a Python method
            accessor = field.getAccessor(content)
        
            body = accessor(mimetype="text/plain")
        
            # Now let's take three first sentences or the whole content of body
            sentences = body.split(".")
            
            if len(sentences) > 3:
               intro = ".".join(sentences[0:3]) 
               intro += "." # Don't forget closing the last sentence
            else:
               # Body text is shorter than 3 sentences
               intro = body
        
            content.setDescription(intro)
        
        
        # context is the reference of the folder where this script is run
        for id, item in context.contentItems():
             # Iterate through all content items (this ignores Zope objects like this script itself)
        
             # Use RestrictedPython safe logging.
             # plone_log() method is permission aware and available on any contentish object
             # so we can safely use it from through-the-web scripts
             context.plone_log("Fixing:" + id)
             
             # Check that the description has never been saved (None)
             # or it is empty
             desc = context.Description() # All Archetypes accessor method, returns UTF-8 encoded string
        
             if desc is None or desc.strip() == "":
                  create_automatic_description(item, "text")
        
        
        return "OK"





