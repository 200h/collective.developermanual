===================
Fields and widgets
===================

.. contents ::

Introduction
------------

This document contains instructions how to manipulate Archetypes schema.

Getting hold of schema objects
-------------------------------

Archetypes based data model is defined as Schema object, which is a list of fields.

During application start-up
===========================

When your class is being constructed you can refer the schema simply in Python::

        
        # Assume you have YourContentSchema object 
        print YourContentSchema.fields()
        
        class SitsCountry(ATBTreeFolder):
                schema =YourContentSchema
                
        print SitsCountry.schema.fields()
        
        
During HTTP request processing
==============================

You can access context schema object by using Schema() accessor. 

.. note:: 

        Run-time schema patching is possible, so Schema() output might 
        differ what you put in to your content type during the construction.

Example::

        schema = context.Schema()
        print schema.fields()

Iterating content schema fields
-------------------------------

Example::
        
        for field in context.Schema().fields():
                print "Field:" + str(field) + " value:" + str(field.get(context))

Field can be also accessed by name::
        
        field = context.Schema()["yourfieldname"]

See

* http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/Schema/__init__.py

Field name
----------

Field exposes its name through getName() attribute::

        field = context.Schema()["yourfieldname"]
        assert field.getName() == "yourfieldname"
        
Accessing Archetypes field value
--------------------------------

Each field has accessor method. Accessor method is

    * In your content type class

    * Automatically generated if you don't give it manually

    * Has name get + schema field name with first letter uppercase. E.g. yourfield has accessor method context.getYourfield()
    
Modifying all fields in schema
------------------------------

You might want to modify all schema fields based on some criteria.

Example how to hide all metadata fields::

	for f in ExperienceEducatorSchema.filterFields(isMetadata=True): f.widget.visible = { "edit" : "invisible" }
	
Reordering fields
-----------------

See moveField() in `Schema/__init__.py <http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/Schema/__init__.py>`_.

Example

.. code-block:: python


    ProductCardFolderSchema = MountPointSchema.copy() + atapi.Schema((

        # -*- Your Archetypes field definitions here ... -*-
        atapi.StringField(
            'pageTitle',
            storage=atapi.AnnotationStorage(),
            widget=atapi.StringWidget(
                label=_(u"Page title"),
                description=_(u"Title shown on the page text if differs from the navigation title"),
            ),
            default=""
        ),

       ...


    ))


    schemata.finalizeATCTSchema(
        ProductCardFolderSchema,
        folderish=True,
        moveDiscussion=False
    )

    # Reorder schema fields to the final order,
    # show special pageTitle field after actual Title field
    ProductCardFolderSchema.moveField("pageTitle", after="title")

Rendering widget
----------------

Archetypes is hardwired to render widgets from viewless TAL page templates.

Example how to render widget for field 'maintext'::

          <tal:fields tal:define="field_macro here/widgets/field/macros/view;
                                  field python:here.Schema()['maintext']">

            <tal:if_visible define="mode string:view;
                                    visState python:field.widget.isVisible(here, mode);
                                    visCondition python:field.widget.testCondition(context.aq_inner.aq_parent, portal, context);"
                            condition="python:visState == 'visible' and visCondition">
              <metal:use_field use-macro="field_macro" />
            </tal:if_visible>
          </tal:fields>






