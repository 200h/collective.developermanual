==================
 Creating objects
==================

.. contents ::

Creating content objects
------------------------

Use invokeFactory(portal_type, id). invokeFactory() is available on all folderish content objects.

Example (from unit tests)::

    self.loginAsPortalOwner()
    self.portal.invokeFactory("Folder", "folder")
    self.portal.folder.invokeFactory("Folder", "subfolder")
    self.portal.folder.subfolder.invokeFactory("Document", "doc")
    
Restricting available types per folder
--------------------------------------

Plone can restrict available content types which you can create in folder
through *Add...* menu.

Restricting available types per content type
===============================================

portal_types defines which content can be created inside which content type.
This is allowed_content_types setting and you can change it through ZMI as well.

You can set the restriction in GenericSetup profiles/default/types/YourType.xml::

        <property name="filter_content_types">True</property>
        
        <property name="allowed_content_types">
                <element value="YourContentTypeName" />
                <element value="Image" />
                <element value="News Item" />
                ...
        </property>

Restricting available types per folder instance
===============================================

In UI, you can access this feature through *Add...* menu *Restrict* option.

Type contraining is managed by ATContentTypes product

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/lib/constraintypes.py


Example::

    # Set allowed content types
    from Products.ATContentTypes.lib import constraintypes

    # Enable contstraining
    folder.setConstrainTypesMode(constraintypes.ENABLED)

    # Types for which we perform Unauthorized check
    folder.setLocallyAllowedTypes(["ExperienceEducator"])

    # Add new... menu  listing
    folder.setImmediatelyAddableTypes(["ExperienceEducator"])

You can also override contraintypes accessor method to have programmable logic which types are addable and which not.

More info

* http://plone.org/documentation/kb/restrict-addable-types

Creating OFS objects
--------------------------

Zope has facilities for basic folder and contained objects by OFS_ subsystem. You do not
need to work with raw objects unless you are doing your custom lightweight, Plone free, persistent data.

More examples in

* `Singing & Dancing <https://svn.plone.org/svn/collective/collective.dancing/trunk/collective/dancing/channel.py>`_.

.. _OFS: `IObjectManager definition <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_.

Archetypes object construction
-------------------------------

The following applies to Archetypes based objects only.

Archetypes content contruction has two phases

#. Object is created using ?createType= URL or Folder.invokeFactory() call. If createType is used
   then the object is given a temporary id. Object has a "in creationg" flag set.

#. Object is saved for the first time and the final id is generated based on the object title.
   Object id is renamed. Creation flag is cleared.

You are supposed to call either object.unmarkCreationFlag() or
object.processForm() after content is created manually using
invokeFactory().

processForm() will perform following tasks:

- unmarks creation flag

- renames object according to title

- reindexes object

- invokes after_creation script and fires ObjectInitialzed event

If you don't want to do particular step, look to
Archetypes/BaseObject.py and call only what you really want.
But unless unmarkCreationFlag() is called the object will behave strangely
after the first edit.

Factory type information
------------------------

Factory type information (FTI) is responsible for content creation in the portal.
It is independend from content type (Archetypes, Dexteriry) subsystems.

.. warning::

    FTI codebase is historical (updated circa 2001). Useful documentation might be hard to find.

FTI is responsible for

* Which function is called when new content type is added

* Icons available for content types

* Creation views for content types

* Permission and security

* Whether discussion is enabled

* factory_type_information is a dictionary that is used elsewhere in the code (often in __init__.py of a product) to set the initial values for a ZODB Factory Type Information object (an object in the portal_types tool)

See

* `FTI source code <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/TypesTool.py?rev=101748&view=auto>`_.

* `Scriptable Types Information HOW TO <http://www.zope.org/Products/CMF/docs/devel/using_scriptable_type_info/view>`_

* `Notes Zope types mechanism <http://www.zope.org/Products/CMF/docs/devel/taming_types_tool/view>`_