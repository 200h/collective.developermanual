-----------------------------
ZODB database troubleshooting
-----------------------------

Problems with

* which data is being written

* transaction

Show last transactions
----------------------

The command line script below will show the last transactions
from Data.fs::

    ##############################################################################
    #
    # Copyright (c) 2001, 2002 Zope Corporation and Contributors.
    # All Rights Reserved.
    #
    # This software is subject to the provisions of the Zope Public License,
    # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
    # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
    # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
    # FOR A PARTICULAR PURPOSE
    #
    ##############################################################################
    """Tool to dump the last few transactions from a FileStorage."""

    from ZODB.fstools import prev_txn
    from ZODB.serialize import ObjectReader, get_refs
    from persistent.TimeStamp import TimeStamp
    from ZODB.FileStorage.FileStorage import FileIterator
    import cStringIO, cPickle
    import optparse, getopt
    import sys


    class Nonce(object): pass

    class Reader(ObjectReader):

        def __init__(self):
            self.identity = None

        def _get_unpickler(self, pickle):
            file = cStringIO.StringIO(pickle)
            unpickler = cPickle.Unpickler(file)
            unpickler.persistent_load = self._persistent_load

            def find_global(modulename, name):
                self.identity ="%s.%s"%(modulename, name)
                return Nonce

            unpickler.find_global = find_global

            return unpickler

        def getIdentity(self, pickle ):
            self.identity = None
            unpickler = self._get_unpickler( pickle )
            unpickler.load()
            return self.identity

        def getObject(self, pickle):
            unpickler = self._get_unpickler( pickle )
            ob = unpickler.load()
            return ob

    def pretty_size( size ):
        if size < 1024:
            return "%sB"%(size)
        kb = size / 1024.0
        if kb < 1024.0:
            return '%0.1fKb'%kb
        else:
            mb = kb/1024.0
            return '%0.1fMb'%mb

    def run(path, ntxn):
        f = open(path, "rb")
        f.seek(0, 2)

        th = prev_txn(f)
        for i in range(ntxn):
            th = th.prev_txn()
        f.close()
        reader = Reader()
        iterator = FileIterator(path, pos=th._pos)
        for i in iterator:
            print "Txn ", TimeStamp(i.tid), i.user, i.description
            object_types = {}
            for o in i:
                ot = reader.getIdentity(o.data)
                if ot in object_types:
                    size, count = object_types[ot]
                    object_types[ot] = (size+len(o.data), count+1)
                else:
                    object_types[ot] = (len(o.data),1)

            keys = object_types.keys()
            keys.sort()
            for k in keys:
                # count, class, size (aggregate)
                print " - ", object_types[k][1], k, pretty_size(object_types[k][0])
        import pickle
        ob = pickle.loads(o.data)

        print ob

    def main():
        ntxn = 20
        opts, args = getopt.getopt(sys.argv[1:], "n:")
        path, = args
        for k, v in opts:
            if k == '-n':
                ntxn = int(v)
        run(path, ntxn)


    if __name__ == "__main__":
        main()
        


zodbbrowser
-----------

* http://pypi.python.org/pypi/zodbbrowser

.. warning::

    It does not work with Plone and Zope 2 Data.fs. You are out of luck.
    You should have just sticked with database with proper tools and
    documentation. They didn't mention this when hyping Plone, did they?








