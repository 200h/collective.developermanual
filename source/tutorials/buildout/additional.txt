=====================
Additional resources
=====================

.. admonition:: Description

   Further info

Plone and buildout
-------------------

* http://maurits.vanrees.org/weblog/archive/2008/01/easily-creating-repeatable-buildouts 


Official Tutorial
------------------

Bit too hardcore for anyone except those creating their own build commands.

* http://www.buildout.org/docs/index.html

Recipes
--------

Buildout consists of recipes. A recipe consists of 

* Python package distributed in pypi.python.org

* Declaration in [buildout] parts=partname

* [partname] section with recipe= telling the pypi.python.org name

Recipes are automatically downloaded from pypi as Python eggs.

Buildout folder structure
--------------------------

Plone buildout's have folderes which have predefined purposes

* ``bin/`` - add Python scripts and shell scripts installed by various eggs. Also ``buildout`` command itself.
  The default Plone start script ``bin/instance`` is here.

* ``parts/`` - constructed the source tree. This is wiped between buildout runs. You should not store 
  any persistent information here (note: some broken recipes store things like pid files here). Generated
  configuration files are stored here and usually it is no help to change them,
  
* ``src/`` source code you are developing yourself

* ``eggs/`` extracted Python eggs

* ``downloads/`` Python egg download cache (may be elsewhere depending on the system config)

* ``var/`` database like data. Zope's Data.fs, 

* ``bootstrap.py`` - installs buildout command

* ``buildout.cfg`` - basic buildout file. May extend other .cfg files. Sometimes there are many files
  and you need to pick one for buildout command. E.g. ::
  
        bin/buildout -c production.cfg

Running buildout behind proxy
------------------------------

Buildout uses setuptools which uses urllib which allows you to set
proxy using http_proxy (lowecase!) environment variable.

Example for UNIX shell (bash)

::

        # Set proxy address as environment varoable.
        # In this case we use Polipo server running on the same compuer.
        http_proxy=http://localhost:8123/
        
        # This is Bash shell specific command to export environment variable
        # to processes started from the shell
        export http_proxy
        
        # Run buildout normally
        bin/buildout
        
You can also SSH tunnel the proxy from a remote server::

        # Make Polipo proxy yourserver.com:8123 
        # made to be available at local port 8123 
        # through SSH tunnel
        ssh -L 8123:localhost:8123 yourserver.com

Buildout cache folder
----------------------

If you are running several buildouts on the same user you should
consider setting the cache folder. All downloaded eggs are cached here.

There are two ways to set the cache folder

* PYTHON_EGG_CACHE environment variable

* download-cache variable in [buildout] - only recommended if the buildout.cfg
  file is not shared between different configurations

Example::

        # Create a cache directory
        mkdir ~/python-egg-cache

        # Set buildout cache directory for this shell session
        export PYTHON_EGG_CACHE=~/python-egg-cache
        
Buildout defaults
=================

You can set user wide buildout settings in the following file:: 

	$HOME/.buildout/default.cfg        
	
This is especially useful if you are running many Plone development buildouts on your computer
and you want them to share the same buildout egg cache settings.


Manually picking dowloaded and active component versions
----------------------------------------------------------

This is also known as pindowning. You can manually choose what Python egg versions
of each component are used. This is often needed to resolve version conflict issues.

* http://www.uwosh.edu/ploneprojects/documentation/how-tos/how-to-use-buildout-to-pin-product-versions

Migrating buildout to different Python interpreter
---------------------------------------------------

You are either

* Copying the whole buildout folder to a new computer (not recommended)

* Changing Python interpreter on the same computer

First you need to clear existing eggs as they might contain binary compilations
for wrong Python version or CPU architecture::

.. code-block:: console

        rm -rf eggs/*

Clear also src/ folder if you are developing any binary eggs.

Buildout can be made aware of new Python interpreter by rerunning bootstrap.py.

.. code-block:: console

        source ~/code/python/python-2.4/bin/activate
        python bootstrap.py
        
Then run buildout again and it will fetch all Python eggs for the new Python interpreter

.. code-block:: console
        
        bin/buildout
        
Setting up Plone site from buildout.cfg and Data.fs
---------------------------------------------------

This is often needed when you are copying or moving Plone site.
If repeatable deployment strategy is done right, everything 
needed to establish a Plone site is 

* buildout.cfg which described Plone site and its add-on products and how they are downloaded or checked out from version control

* Data.fs which contains the site database

Below is an example process.

Activate Python 2.6 for Plone (see :doc:`how to use virtualenv controlled non-system wide Python </tutorials/python>`::

        source ~/code/python/python-2.6/bin/activate
        
Install ZopeSkel templates which contains a buildout and folder structure template for Plone site (plone3_buildout 
works also for Plone 4 as long as you type in the correct version when paster template engine asks for it)::

         easy_install ZopeSkel # creates paster command under virtual bin/ folder and downloads Plone/Zope templates              
         paster create -t plone3_buildout 


        paster create -t plone3_buildout newprojectfoldername
        ...
        Selected and implied templates:
          ZopeSkel#plone3_buildout  A buildout for Plone 3 installation
        ...
        
        Expert Mode? (What question mode would you like? (easy/expert/all)?) ['easy']: 
        Plone Version (Plone version # to install) ['3.3.4']: 4.0
        Zope2 Install Path (Path to Zope2 installation; leave blank to fetch one!) ['']: 
        Plone Products Directory (Path to Plone products; leave blank to fetch [Plone 3.0/3.1 only]) ['']: 
        Initial Zope Username (Username for Zope root admin user) ['admin']: admin
        Initial User Password (Password for Zope root admin user) ['']: admin
        HTTP Port (Port that Zope will use for serving HTTP) ['8080']: 
        Debug Mode (Should debug mode be "on" or "off"?) ['off']: on
        Verbose Security? (Should verbose security be "on" or "off"?) ['off']: on

Then you can add copy buildout.cfg from the existing site to your new project ::
        
        copy buildout.cfg newproject # Copy the existing site configuration file to new project
        cd newproject
        python bootstrap.py # Creates bin/buildout command for buildout
        bin/buildout # Run buildout - will download and install necessary add-ons to run Plone site
        
Assuming buildout completes succesfully, test that the site starts (without database)::

        bin/instance fg # Start Zope in foreground debug mode
                
Press CTRL+C to stop the instance.

Now copy the existing database Data.fs to buildout::

        cp Data.fs var/filestorage/Data.fs # There should be existing Data.fs file here, created by site test launch         

If you do not know the admin user account for the database, you can create additional admin user::

        bin/instance adduser admin2 admin # create user admin2 with password admin        
        
Check Zope start up message in which port the instance is running (default port is 8080)::


        2010-09-06 12:55:17 INFO ZServer HTTP server started at Mon Sep  6 12:55:17 2010
        Hostname: 0.0.0.0
        Port: 20001

Then log in to Zope Management Interface by going with your browser::

        http://localhost:8080

Setting LD_LIBRARY_PATH
-------------------------

``LD_LIBRARY_PATH`` is UNIX environment variable tell from which folders load native dynamic linked libraries (.so files).
You might want to override your system-wide libraries, because operating systems may ship with old, incompatible, versions.                

You can use ``environment-vars`` of `zope2instance <http://pypi.python.org/pypi/plone.recipe.zope2instance>Â´_ recipe.       
       
Example in buildout.cfg::

        [instance]

        # Use statically compiled libxml2
        environment-vars =
                LD_LIBRARY_PATH ${buildout:directory}/parts/lxml/libxml2/lib:${buildout:directory}/parts/lxml/libxslt/lib
    
        

Paste factory
--------------

Web based user interface to create different buildouts

* http://pypi.python.org/pypi/collective.generic.webbuilder
       
Troubleshooting
----------------

See :doc:`Buildout troubleshooting </troubleshooting/buildout>` chapter.
