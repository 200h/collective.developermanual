====================
 Zopeskel templates
====================

.. contents :: :local: 

.. admonition:: Description

        ZopeSkel template package provides product skeletons for Plone to
        start programming Plone more easily.
        
Introduction
------------

More about ZopeSkel

* http://plone.org/products/zopeskel

ZopeSkel is based on `paster command <http://pythonpaste.org/script/>`_.

ZopeSkel package provides bunch of templates and friendly ``zopekskel`` script
which wraps the more error prone ``paster`` script.

Zopeskel and buildout
----------------------

If you are using buildout to manage your Python application deployment, you can integrate paster  
with it.

Add to your *buildout.cfg*::

        
        parts =
            ...
            zopeskel
            
        
        [zopeskel]
        recipe = zc.recipe.egg
        eggs = 
                ZopeSkel 
                ${instance:eggs}

After rerunning buildout, buildout adds *zopeskel* command to *bin* folder.

Then you can run zopeskel from buildout folder::

        bin/zopeskel
        
.. warning ::

    It is strongly advised to use or install paster in system-wide Python.
    Always run paster command run the buildout itself. This way paster is aware of your deployment configuration and local commands
    won't explode on your face.

Creating an add-on product skeleton
-----------------------------------

After you have followed the steps above to add ZopeSkel to your buildout, 
you can create your first add-on.

Create theme (applies for Plone 4 also)::
	
	bin/zopeskel plone3_theme plonetheme.mythemeid
	
Create Archetypes based content types package::

	bin/zopeskel archetype mycompanyid.content

Create other Plone customizations::

	bin/zopeskel plone mycompanyid.mypackageid

Some questions are asked to fill in version information, etc.
When ``plone`` template asks for *GenericSetup profile* answer ***yes**.

After this you need to include the newly created egg in your buildout.cfg::

	eggs =
		yourcompany.productname

	develop-eggs = 
		src/yourcompany.productname
			
Rerun buildout.

Restart Plone in foreground mode. If your template input contained errors it usually fails in this point.

Now you should see your add-on in Plone add-on installer.
        
Local commands
---------------------------------

Besides generic project templates, ZopeSkel package provides local commands.
Local commands are context aware commands to add more functionality to an existing ZopeSkel generated
project.

.. note ::

	To use local commands you need to use paster command directly - zopeskel does not support them yet.

Example what kind of Plone functionality you can add with local commands

* Views

* Content types

* Forms

* Portlets

Example
=======

In this example we create Archetypes based content types add-on product.
We will first create the project skeleton, then enter the project
and add more content types there using local commands.

Example or creating a content type::

		# First create an add-on skeleton if one does not exist
        cd src
        ../bin/zopeskel archetype mycompanyid.mycustomcontenttypes
                
        # Now new paster commands are available and listed when paster is run in this folder
        cd mycompanyid.mycustomcontenttypes
        ../../bin/paster
        
        Usage: ../../bin/paster COMMAND
        usage: paster [paster_options] COMMAND [command_options]
        
        ...
                
        Commands:
          ...
                  
        ZopeSkel local commands:
          addcontent   Adds plone content types to your project
                

Above, ZopeSkel paster template adds its addcontent templates.
Now you can use ``addcontent`` local command to contribute to the existing project

::

        ../../bin/paster addcontent -t contenttype MyShinyWebPage

Example or creating a portlet::

        ../../bin/paster addcontent -t portlet

.. note ::

	When changing the add-on code the changes usually touch GenericSetup XML files (ones
	in profiles/default folder). This changes are not reflected to Plone/Zope application
	server when it is restarted, because they are site specific changes and apply to one
	site only. You need to rerun add-on product installer when these files have changed. 	       
        
Creating content types
=======================
        
For more information how to use paster to create content for Plone, `see here <http://www.coactivate.org/projects/plone-conference-2008-dc/zopeskel>`_.

To see list of available paster local commands, run paster command ::

         ../../bin/paster addcontent --list
         
... in your development project. For ZopeSkel specific projects the output should be something like this::

    Available templates:
        atschema:     A handy AT schema builder
        contenttype:  A content type skeleton
        form:         A form skeleton
      

In-depth background information
---------------------------------
               
How paster local commands work
================================

paster reads setup.py. If it founds *paster_plugins* section there,
it will look for local commands there.
For example, Plone project templates declare the following paste_plugins in setup.py::

        paster_plugins = ["ZopeSkel"]
        
setup.py install_requires
================================

Python modules can dependencies to other modules using setup.py and *install_requires*
section. For example, a Plone add-on might read::

      install_requires=['setuptools',
                        # -*- Extra requirements: -*-
                        "five.grok",
                        "plone.directives.form"
                        ],
                        
This means that when you use setuptools/buildout/pip/whatever Python package
installation tool to install your package from `Python Package Index (PyPi) <http://pypi.python.org/pypi>`_
it will also automatically install Python packages declared in install_requires.

paster and install_requires
===========================                     

This is where things usually go haywire.

Let's assume you are using paster in a project which contains 
N python packages. You probably use an external configuration 
system manage your installed application and their versions
to make repeatable deployments possible (hint: `buildout <http://www.buildout.org>`_ 
is gaining traction in Python community lately). 

Paster is not aware of this external Python package configuration set (paster cannot see
them in its PYTHONPATH).
So what happens when you try to execute *paster create* which reads setup.py *install_requires*
and encounters depencies?

Paster will try to automatically download and install them **locally in that folder**.

Plone and Zope ecosystem contains over hundreds of reusable components,
in nice dependency hierarchy. *paster create* would try to pull all them in to 
your source tree as \*.egg folders. `See discussion here <http://n2.nabble.com/Correct-way-to-use-paster-with-buildout-tp4555533p4558043.html>`_.

.. warning ::

        Do not never use system paster command. 
        
Do not ever run *sudo easy_install ZopeSkel*. Do not ever run paster local commands using a paster 
command from your system-wide Python installation.        

.. warning ::

        The internet is full of tutorial saying *easy_install ZopeSkel*.
        If you ever encounter this kind of tutorial, it's wrong.            
        
