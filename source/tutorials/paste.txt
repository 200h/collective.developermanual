==================
 Paste script
==================

.. contents :: :local: 

.. admonition:: Description

        Using paste script to generate add-on product skeleton for Plone to
        start programming Plone.
        
Introduction
------------

`Paste script <http://pythonpaste.org/script/>`_ is a part of `Python Paste <http://en.wikipedia.org/wiki/Python_Paste>`_
web development utilities. 

It's ``paster create`` command is used by various Python frameworks to generate skeleton code for a development project.

``paste`` is used also by Plone to create add-on products and new code in add-on products easily.

Paste and buildout
-------------------

If you are using buildout to manage your Python application deployment, you can integrate paster nicely 
with it.

Add to your *buildout.cfg*::

        
        parts =
            ...
            paster
            
        
        [paster]
        recipe = zc.recipe.egg
        eggs = 
                PasteScript 
                ZopeSkel 
                ${instance:eggs}

After rerunning buildout, buildout adds *paster* command to *bin* folder.

Then you can run paster from buildout folder::

        bin/paster
        
... or in a buildout managed project under ``src/`` folder using relative references... ::

        ../../bin/paster

.. warning ::

    It is strongly advised to use or install paster in system-wide Python.
    Always run paster command run the buildout itself. This way paster is aware of your deployment configuration and local commands
    won't explode on your face.

Creating an add-on product skeleton
-----------------------------------

After you have followed the steps above to add *paster* to your buildout, 
you can create your first add-on.

.. code-block:: console

    cd src # Create src folder if it does not exist yet
    ../bin/paster create -t plone yourcompany.productname # will create src/yourcompany.productname folder

Some questions are asked to fill in version information, etc.
When ``plone`` template asks for *GenericSetup profile* answer ***yes**.

After this you need to include the newly created egg in your buildout.cfg::


	eggs =
		yourcompany.productname

	develop-eggs = 
		src/yourcompany.productname
			
Rerun buildout.

Restart Plone in foreground mode. If your template input contained errors it usually fails in this point.

Now you should see your add-on in Plone add-on installer.

Create a portlet
================

Creating a portlet is the first easy thing to do with your add-on product skeleton.

Follow local commands instructions below to start with one.			      
        
Paster create and local commands
---------------------------------

Besides generic project templates, *paster create* provides *local commands*
which are project aware commands to add more modules to an existing project.
Local commands are added by paster extensions. For example,
`ZopeSkel <http://plone.org/products/zopeskel>`_ product
has various local commands to add more content to Plone/Zope projects
automatically

* Views

* Content types

* Forms

* Portlets

... and so on. 

For example, you could generate a project template, Plone add-on module, 
and then create content types there using a local paster command.
The local commands become available when you execute 
paster in the folder of your Python project.

Example or creating a content type::

		# First create an add-on skeleton if one does not exist
        cd src
        ../bin/paster create -t archetype myorg.customploneaddon
                
        # Now new paster commands are available and listed when paster is run in this folder
        cd myorg.customploneaddon
        ../../bin/paster
        
        Usage: ../../bin/paster COMMAND
        usage: paster [paster_options] COMMAND [command_options]
        
        ...
                
        Commands:
          ...
                  
        ZopeSkel local commands:
          addcontent   Adds plone content types to your project
                

Above, ZopeSkel paster template adds its addcontent templates.
Now you can use ``addcontent`` local command to contribute to the existing project

::

        ../../bin/paster addcontent -t contenttype MyShinyWebPage

Example or creating a portlet::

        ../../bin/paster addcontent -t portlet

.. note ::

	When changing the add-on code the changes usually touch GenericSetup XML files (ones
	in profiles/default folder). This changes are not reflected to Plone/Zope application
	server when it is restarted, because they are site specific changes and apply to one
	site only. You need to rerun add-on product installer when these files have changed. 	       
        
Creating content types
=======================
        
For more information how to use paster to create content for Plone, `see here <http://www.coactivate.org/projects/plone-conference-2008-dc/zopeskel>`_.

To see list of available paster local commands, run paster command ::

         ../../bin/paster addcontent --list
         
... in your development project. For ZopeSkel specific projects the output should be something like this::

    Available templates:
        atschema:     A handy AT schema builder
        contenttype:  A content type skeleton
        form:         A form skeleton
      
               
How paster local commands work
------------------------------------------------

paster reads setup.py. If it founds *paster_plugins* section there,
it will look for local commands there.
For example, Plone project templates declare the following paste_plugins in setup.py::

        paster_plugins = ["ZopeSkel"]
        
setup.py install_requires
--------------------------

Python modules can dependencies to other modules using setup.py and *install_requires*
section. For example, a Plone add-on might read::

      install_requires=['setuptools',
                        # -*- Extra requirements: -*-
                        "five.grok",
                        "plone.directives.form"
                        ],
                        
This means that when you use setuptools/buildout/pip/whatever Python package
installation tool to install your package from `Python Package Index (PyPi) <http://pypi.python.org/pypi>`_
it will also automatically install Python packages declared in install_requires.

paster and install_requires
===========================                     

This is where things usually go haywire.

Let's assume you are using paster in a project which contains 
N python packages. You probably use an external configuration 
system manage your installed application and their versions
to make repeatable deployments possible (hint: `buildout <http://www.buildout.org>`_ 
is gaining traction in Python community lately). 

Paster is not aware of this external Python package configuration set (paster cannot see
them in its PYTHONPATH).
So what happens when you try to execute *paster create* which reads setup.py *install_requires*
and encounters depencies?

Paster will try to automatically download and install them **locally in that folder**.

Plone and Zope ecosystem contains over hundreds of reusable components,
in nice dependency hierarchy. *paster create* would try to pull all them in to 
your source tree as \*.egg folders. `See discussion here <http://n2.nabble.com/Correct-way-to-use-paster-with-buildout-tp4555533p4558043.html>`_.

.. warning ::

        Do not never use system paster command. 
        
Do not ever run *sudo easy_install ZopeSkel*. Do not ever run paster local commands using a paster 
command from your system-wide Python installation.        

.. warning ::

        The internet is full of tutorial saying *easy_install ZopeSkel*.
        If you ever encounter this kind of tutorial, it's wrong.            
        
