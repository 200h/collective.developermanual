===============
 Buildout
===============

.. admonition:: Description

        Buildout is a tool used to make site configuration repeatable and automatic.
        It will download and configure software for you.

.. contents :: :local:

Introduction
-------------

Buildout is a tool used to make site configuration repeatable and automatic.
It will download and configure software for you.

* There is a file called ``buildout.cfg``

* You run command ``bin/buildout`` and new sofware will be downloaded, 
  installed and configured as specified in ``buildout.cfg``

Plone and buildout
-------------------

* http://maurits.vanrees.org/weblog/archive/2008/01/easily-creating-repeatable-buildouts 

* http://plone.org/documentation/manual/developer-manual/managing-projects-with-buildout

Official Tutorial
------------------

Bit too hardcore for anyone except those creating their own build commands.

* http://www.buildout.org/docs/index.html

Recipes
--------

Buildout consists of recipes. A recipe consists of 

* Python package distributed in pypi.python.org

* Declaration in [buildout] parts=partname

* [partname] section with recipe= telling the pypi.python.org name

Recipes are automatically downloaded from pypi as Python eggs.

Buildout folder structure
--------------------------

Plone buildout's have folderes which have predefined purposes

* ``bin/`` - add Python scripts and shell scripts installed by various eggs. Also ``buildout`` command itself.
  The default Plone start script ``bin/instance`` is here.

* ``parts/`` - constructed the source tree. This is wiped between buildout runs. You should not store 
  any persistent information here (note: some broken recipes store things like pid files here). Generated
  configuration files are stored here and usually it is no help to change them,
  
* ``src/`` source code you are developing yourself

* ``eggs/`` extracted Python eggs

* ``downloads/`` Python egg download cache (may be elsewhere depending on the system config)

* ``var/`` database like data. Zope's Data.fs, 

* ``bootstrap.py`` - installs buildout command

* ``buildout.cfg`` - basic buildout file. May extend other .cfg files. Sometimes there are many files
  and you need to pick one for buildout command. E.g. ::
  
        bin/buildout -c production.cfg

Running buildout behind proxy
------------------------------

Buildout uses setuptools which uses urllib which allows you to set
proxy using http_proxy (lowecase!) environment variable.

Example for UNIX shell (bash)

::

        # Set proxy address as environment varoable.
        # In this case we use Polipo server running on the same compuer.
        http_proxy=http://localhost:8123/
        
        # This is Bash shell specific command to export environment variable
        # to processes started from the shell
        export http_proxy
        
        # Run buildout normally
        bin/buildout
        
You can also SSH tunnel the proxy from a remote server::

        # Make Polipo proxy yourserver.com:8123 
        # made to be available at local port 8123 
        # through SSH tunnel
        ssh -L 8123:localhost:8123 yourserver.com

Buildout cache folder
----------------------

If you are running several buildouts on the same user you should
consider setting the cache folder. All downloaded eggs are cached here.

There are two ways to set the cache folder

* PYTHON_EGG_CACHE environment variable

* download-cache variable in [buildout] - only recommended if the buildout.cfg
  file is not shared between different configurations

Example::

        # Create a cache directory
        mkdir ~/python-egg-cache

        # Set buildout cache directory for this shell session
        export PYTHON_EGG_CACHE=~/python-egg-cache

Manually picking dowloaded and active component versions
----------------------------------------------------------

This is also known as pindowning. You can manually choose what Python egg versions
of each component are used. This is often needed to resolve version conflict issues.

* http://www.uwosh.edu/ploneprojects/documentation/how-tos/how-to-use-buildout-to-pin-product-versions

Migrating buildout to different Python interpreter
---------------------------------------------------

You are either

* Copying the whole buildout folder to a new computer (not recommended)

* Changing Python interpreter on the same computer

First you need to clear existing eggs as they might contain binary compilations
for wrong Python version or CPU architecture::

.. code-block:: console

        rm -rf eggs/*

Clear also src/ folder if you are developing any binary eggs.

Buildout can be made aware of new Python interpreter by rerunning bootstrap.py.

.. code-block:: console

        source ~/code/python/python-2.4/bin/activate
        python bootstrap.py
        
Then run buildout again and it will fetch all Python eggs for the new Python interpreter

.. code-block:: console
        
        bin/buildout
                
Troubleshooting
----------------

See :doc:`Buildout troubleshooting </troubleshooting/buildout>` chapter.

