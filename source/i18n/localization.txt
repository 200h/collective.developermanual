====================================
Internationalization (i18n) files
===================================

Internationalization is a process to make your code locale and language aware.
Usually this means supplying translation files for text strings
used in the code.

Plone internally uses UNIX standard `gettext <http://www.gnu.org/software/gettext/>`_
tool to perform i18n.

There are two separate gettext systems. Both use `.po <http://www.gnu.org/software/hello/manual/gettext/PO-Files.html>` 
file format to describe translations.

Note that this chapter concerns only code-level translations. Content translations are
managed by Products.LinguaPlone add-on product. 

zope.i18n
---------

* Follows gettext best practices 

* Translations are stored in *locales* folder of your application. Example: *i18n/LC_MESSAGES/fi/your.app.po*

* Has zope.i18nmessageid package which is string-like class allowing storing translation domain
  with translatable text strings easily
  
* `.po` files must be manually converted to `.mo` binary files every time the translations are updated.
  See i18ndude.
  
Each module declares its own MessageFactory which is a callable and marks strings with translation domain.
MessageFactory is declared at main __init__.py file of your package.  

.. code-block:: python

	from zope.i18nmessageid import MessageFactory

    # your.app.package must match domain declaration in .po files 
 	yourAppMessageFactory = MessageFactory('your.app.package')
 	
Then you can use it in your code to mark strings with translation domains.
i18ndude translation utilities use underscore _ to mark translatable strings (gettext message ids).
Message ids must be unicode strings.

.. code-block:: python

	from your.app.package import yourAppMessageFactory as _
	
	my_text = _(u"My text")

When my_text is run through context.translate() function the actual translation is performed.
Various user interface elements, like TAL page templates, perform this automatically
when being processed.  	

There are also other message id markers in code outside Python domain

* ZCML entries have their own mechanism

* GenericSetup XML have their own mechanism

* TAL page templates have their own mechanism

PlacessTranslationService
-------------------------

* Historic, being phased out

* Stores .po files in *i18n* folder of your add-on product  

* Used for main "plone" translation catalog

* Translation files are processed when Plone is restarted. Example: *i18n/yourapp-fi.po*.

i18ndude
--------

i18ndude is developer command-line utility to manage .po and .mo files.

Usually you build our own shell script wrapper around i18ndude to automatize
generation of .mo files of your product .po files.

Examples

* `i18ndude example for Plone 3.0 and later <http://maurits.vanrees.org/weblog/archive/2007/09/i18n-locales-and-plone-3.0>`_

* `i18ndude example for Plone 2.5 <http://blogs.ingeniweb.com/blogs/user/7/tag/i18ndude/>`_ 

Other
-----

* http://reinout.vanrees.org/weblog/2007/12/14/translating-schemata-names.html

* http://plone.org/products/archgenxml/documentation/how-to/handling-i18n-translation-files-with-archgenxml-and-i18ndude/view?searchterm=



