=========================
Images in page templates
=========================

.. contents ::

Introduction
------------

How to deal with images and page templates.

Static image
------------

How to refer to images in your add-on product.

Zope 3 resource directory
=========================

Right way to put in a static image is for Zope 3 resource directory ::

        <img alt="" tal:attributes="src string:${context/portal_url}/++resource++your.product.images/logo.gif" />

This will pull image from src/your.product/your/product/browser/images/logo.gif.        
        
Grok static media folder
========================      

Right way to put in a static image if your product is using five.grok framework::

        <img alt="" tal:attributes="src string:${context/portal_url}/++resource++yourproduct/logo.gif" />

This will pull image from src/your.product/your/product/static/logo.gif.
        

tag() method
-------------

Some content provide handy tag() method to generate <img src="" /> tags
with different image sizes.

tag() is available in

* Archetypes ImageField

* ATNewsItem

* ATImage

* FSImage (Zope 2 image object in file-system)

tag() is defined in `OFS.Image <http://svn.zope.org/Zope/trunk/src/OFS/Image.py?rev=96262&view=auto>`_.

Scaling images
==============

tag() supports scaling. Scale sizes are predefined.
When ATImage is uploaded
various scaled versions of it are stored in the database.

Displaying a version of the image using scale "preview"

.. code-block:: python

	image.tag(scale="preview", alt="foobar text")

Will give out::

	<img src="http://something/folder/image/image_preview" alt="foobar text" />

.. note::

	If you are not using alt attribute you should always set it to
	empty string alt="". Otherwise screen readers will read
	the src attribute of the <img> aloud.

In order to simplify the accessing of these image scales, use `archetypes.fieldtraverser <http://pypi.python.org/pypi/archetypes.fieldtraverser>`_.
This package allows you to traverse to the stored image scales while still using AnnotationStorage and is a lot simpler to get going (in the author's humble opinion :).

Default scale names and sizes are defined in ImageField declaration for custom ImageFields.
For ATImage those are in `Products.ATContentTypes.content.image <http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/image.py>`_.

