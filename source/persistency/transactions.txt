================
Transactions
================

.. contents ::

Introduction
--------------

Plone uses `ZODB database <http://en.wikipedia.org/wiki/Zope_Object_database>` which follows
`Multiversion concurrency control pararigm <http://en.wikipedia.org/wiki/Multiversion_concurrency_control>`_.

During the HTTP request process, Plone completes all modifications of the data or
none of them. There cannot end partially written data to database.

Plone and the underlying Zope handles transactions transparently.

.. note::

	 Every transaction is read transaction until some of the 
	 objects participating in the transaction is being mutated
	 (object attribute set), turning the transaction to a write transaction
	 
Please read `this Zope transaction tutorial <http://www.zope.org/Members/mcdonc/HowTos/transaction>`_
to get started how to use transaction with your code.	 

Using transactions
------------------

Normally transactions are managed by Plone and the developer should not be interested in them.

Special cases where one would want to manage transaction life-cycle may include

* Batch creation or editing of many items once

Example code

* `transaction source code <http://svn.zope.org/transaction/trunk/transaction/?rev=104430>`_.

* http://www.zope.org/Members/mcdonc/HowTos/transaction

* https://bugs.launchpad.net/zope3/+bug/98382

Transaction boundary events
----------------------------

It is possible to perform actions before and after transaction is written to the database.

http://svn.zope.org/transaction/trunk/transaction/_transaction.py?rev=81646&view=auto

Viewing transaction content and debugging transactions
-------------------------------------------------------

Please see :doc:`Transaction troubleshooting </troubleshooting/transactions>`