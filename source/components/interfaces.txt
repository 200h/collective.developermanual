==========
Interfaces
==========

Interfaces define what methods object provides. 

Interface defines the shape of a hole where you can drop different pieces.
The shape of the piece is defined by interface, but the implementation
details like color, material, etc. can vary.

See `zope.interface package README <http://pypi.python.org/pypi/zope.interface>`.

Getting interface string id
---------------------------

The interface id is stored in the __identifier__ attribute.

Example file yourpackage/interfaces.py ::

    import zope.interface

    class IFoo(zope.interface.Interface).
        pass
    
    
    # id is yourpackage.interfaces.IFoo
    id = IFoo.__identifier__


Note that this attribute does not respect import aliasing.

Example::

    Products.ATContentTypes.interfaces.IATDocument.__identifier__ is
    Products.ATContentTypes.interfaces.document.IATDocument
    
Getting interface class by its string id
----------------------------------------

Use `zope.dottedname package <http://pypi.python.org/pypi/zope.dottedname>`_.

Example::

    import zope.interface
    from zope.dottedname.resolve import resolve

    class IFoo(zope.interface.Interface).
        pass
        
        
    # id is yourpackage.interfaces.IFoo
    id = IFoo.__identifier__
    
    interface_class == resolve(id)
    
    assert IFoo == interface_class

Applying marker interfaces for content types
--------------------------------------------

You can retrofit content types with a marker interface afterwards.

Example use cases

* You want to assign a viewlet for a set of particular content types

* You want to enable certain behavior on certain content types

This can be done in ZCML using <class> declaration::

   <!-- List pages where last modified viewlet is enabled -->
   <class class="Products.ATContentTypes.content.document.ATDocument">
          <implements interface=".interfaces.ILastModifiedSupport" />
   </class>

   <class class="Products.ATContentTypes.content.event.ATEvent">
          <implements interface=".interfaces.ILastModifiedSupport" />
   </class>

   <class class="Products.ATContentTypes.content.newsitem.ATNewsItem">
          <implements interface=".interfaces.ILastModifiedSupport" />
   </class>


Then we can have a viewlet for these content types only using the following (grok example)::


        from five import grok
        from interfaces import ILastModifiedSupport
        from plone.app.layout.viewlets.interfaces import IBelowContent
        
        class LastModified(grok.Viewlet):
            """ Viewlet to show the document last modification time.
            
            This is enabled on Page, Event and News Item wich implement ILastModofiedSupport marker interface.
            """
            
            grok.context(ILastModifiedSupport)
            grok.viewletmanager(IBelowContent)
        
    
