================
Utilities
================

.. admonition:: Description

        Utility design pattern in Zope 3 allows easily overridable singleton class instances
        for your code.

.. contents :: :local:

Introduction
------------

* Utility classes provide site-wide utility functions. 

* They are registered by marker interfaces.

* Site customization logic or add-on products can override utility for enhanced or modified functionality
  
* Utilities can be looked up by name or interface

* Compared to "plain Python functions" utiltiies provide the advantage of being plug-in points without need of :doc:`monkey-patching </misc/monkeypatch>`

Read more in 

* http://plone.org/products/dexterity/documentation/manual/five.grok/core-components/utilities

* `zope.component documentation <http://apidoc.zope.org/++apidoc++/Code/zope/component/README.txt/index.html>`_.

Register utility
-----------------

Utility is constructed when Plone is started and ZCML is read.
Utilities take no constructor parameters. If you need to use parameters
like context or request, consider using views or adapters instead.
Utilities may or may not have a name.

ZCML example::

   <!-- Register header animation picking logic - override this for your custom logic -->
   <utility
     provides="gomobile.convergence.interfaces.IConvergenceMediaFilter"
     factory=".filter.ConvergedMediaFilter" />
         

Python example (named utility)::

	def registerOnsitePaymentProcessor(processor_class):
	    """ """

	    # Make OnsitePaymentProcessor class available as utiltiy
	    processor = processor_class()
	    gsm = component.getGlobalSiteManager()
	    gsm.registerUtility(processor, interfaces.IOnsitePaymentProcessor, processor.name)
	    
The utility class "factory" is in its simplest form a class which implements the interface::

        class ConvergedMediaFilter(object):
            """ Helper class to deal with media state of content objects. 
            
            """
            
            zope.interface.implements(IConvergenceMediaFilter)
            
            def foobar(x):
                """ An example method """
                return x+2	    


To use this class::
    
        from gomobile.convergence.interfaces import IConvergenceMediaFilter
        
        def something():
           filter = getUtility(IConvergenceMediaFilter)
           x = filter.foobar(3)                    

Overriding utility
------------------

If you want to override any existing utility you can re-register the utility  in ``overrides.zcml`` file in your product.

Getting utility
---------------

There are two functions

    * zope.component.getUtility will raise exception if utility is not found

    * zope.component.queryUtility will return None if utility is not found


Utility query parameters are passed to the utility class constructor.

Example::

    from zope.component import getUtility, queryUtility

    # context and request are passed to the utility class constructor
    # they are optional and depend on the utility itself
    picker = getUtility(IHeaderAnimationPicker, context, request)

.. note ::

        You cannot use getUtility() on Python module body level code 
        during import, as Zope Component Architecture is not yet initialized.
        Always call getUtility() from HTTP request end point or after Zope 
        has been started.

Getting all named utilities of one interface
--------------------------------------------

Use zope.component.getUtilitiesFor().

Example

.. code-block:: python

	def OnsitePaymentProcessors(context):
	    """ List all registered on-site payment processors.

	    Mostly useful for validating form input.

	    Vocabulary contains all payment processors, not just active ones.

	    @return: zope.vocabulary.SimpleVocabulary
	    """
	    utilities = component.getUtilitiesFor(interfaces.IOnsitePaymentProcessor)
	    for name, instance in utilities:
	    	pass

Unregistering utilities
------------------------

* http://www.muthukadan.net/docs/zca.html#unregisterutility
