===========================
 GenericSetup and profiles
===========================

.. admonition:: Description

        GenericSetup is a framework to modify Plone site database during 
        add-on product installation and uninstallation. It provides
        XML based rules to change the site settings easily.

.. contents :: :local:

Introduction
-------------

GenericSetup is an XML-based way to import and export Plone site configurations.

It is mainly used for prepare Plone site database for add-on product

* Register CSS files

* Registering Javascript files

* Setting various properties

* Registering portlets

* Registering portal_catalog search query indexes

* ...and so on...

GenericSetup is mostly used to apply add-on specific changes to the site configuration
and enabled add-on specific behavior when the add-on installer is run.

GenericSetup XML files are usually under *profiles/default* folder inside
the add-on product.

All run-time configurable items, like viewlets order through /@@manage-viewlets
page, are made repeatable using GenericSetup profile files.

You do not need to hand-edit GenericSetup profile files.
You can always change the configuration options through Plone
or Zope Management Interface. Then you can produce the profile
XML file using *Export* tab in *portal_setup* ZMI tool.

Directly
editing XML profile files do not change anything on the site, even after Zope
restart. This is because run-time configurable items are stored in
the database. If you edit profile files, you need reimport
edited files using portal_setup tool or rerun the add-on
product installer in Plone control panel. This import will
read XML files and change Plone database accordingly.


.. note::

    Difference between ZCML and GenericSetup

    ZCML changes affect loaded Python code in
    **all** sites inside Zope whereas
    GenericSetup XML files affect ony one Plone site and its database.
    GenericSetup XML files are always database changes.

    Relationship between ZCML and site-specific behavior is usually done
    using :doc:`layers </views/layers>`. ZCML
    directives, like viewlets and views, are registered
    to be active on a certain layer only using `layer`
    attribute. When GenericSetup XML is imported
    through portal_setup, or the product add-on installer is
    run for a Plone site, the layer is activated for the
    particular site only, enabling all views registered
    for this layer.

* `GenericSetup tutorial <http://plone.org/documentation/tutorial/genericsetup>`_

* `GenericSetup product page <http://pypi.python.org/pypi/Products.GenericSetup/1.4.5>`_.

* `Source code <http://svn.zope.org/Products.GenericSetup/trunk/Products/GenericSetup/README.txt?rev=87436&view=auto>`_.


Creating a profile
------------------

You use <genericsetup> directive in your add-on product's configure.zcml.
The name for the default profile executed by Plone add-on installer
is "default". If you need different profiles for e.g. unit testing
you can declare them here.

Profile XML files go to profiles/default folder inside your add-on product.

.. code-block:: xml

	<configure
	    xmlns="http://namespaces.zope.org/zope"
	    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
	    i18n_domain="gomobile.mobile">

	    <genericsetup:registerProfile
	      name="default"
	      title="Plone Go Mobile"
	      directory="profiles/default"
	      description='Mobile CMS add-on'
	      provides="Products.GenericSetup.interfaces.EXTENSION"
	      />

	</configure>



Add-on specific issues
----------------------

Add-on product may contain

* Default GenericSetup XML profile which is automatically run when the product is quick installer. The profile name is "default".

* Other profiles which the user may install through portal_setup Import      or which can be manually enabled for unit tests

* "Import various" step which runs Python code every time GenericSetup XML profile is installed

More information about custom import steps

* http://n2.nabble.com/indexing-of-content-created-by-Generic-Setup-tp4454703p4454703.html

Listing available profiles
--------------------------

Example::

        # Run the default quick installer profile
        setup_tool = self.portal.portal_setup

        profiles = setup_tool.listProfileInfo()
        for profile in profiles:
            print  str(profile)

Results::

    {'product': 'PluggableAuthService', 'description': 'Content for an empty PAS (plugins registry only).', 'for': <InterfaceClass Products.PluggableAuthService.interfaces.authservice.IPluggableAuthService>, 'title': 'Empty PAS Content Profile', 'version': 'PluggableAuthService-1.5.3', 'path': 'profiles/empty', 'type': 1, 'id': 'PluggableAuthService:empty'}
    {'product': 'Products.CMFDefault', 'description': u'Profile for a default CMFSite.', 'for': <InterfaceClass Products.CMFCore.interfaces._content.ISiteRoot>, 'title': u'CMFDefault Site', 'version': 'CMF-2.1.1', 'path': u'profiles/default', 'type': 1, 'id': u'Products.CMFDefault:default'}
    {'product': 'Products.CMFPlone', 'description': u'Profile for a default Plone.', 'for': <InterfaceClass Products.CMFPlone.interfaces.siteroot.IPloneSiteRoot>, 'title': u'Plone Site', 'version': u'3.1.7', 'path': u'/home/moo/sits/parts/plone/CMFPlone/profiles/default', 'type': 1, 'id': u'Products.CMFPlone:plone'}
    {'product': 'Products.Archetypes', 'description': u'Extension profile for default Archetypes setup.', 'for': None, 'title': u'Archetypes', 'version': u'1.5.7', 'path': u'/home/moo/sits/parts/plone/Archetypes/profiles/default', 'type': 2, 'id': u'Products.Archetypes:Archetypes'}
    ...

Installing a profile
--------------------

This is usually unit test specific question how to enable certain add-ons for unit testing.

PloneTestCase.setupPloneSite
============================

See *Running add-on installers and extensions profiles for unit tests*.

Manually
=========

You might want to install profiles manually if they need to be enabled only for certain tests.

Profile name is in format profile-${product name}:${profile id}

Unit testing example::

    # Run the extended profile which will create email_catalog
    setup_tool.runAllImportStepsFromProfile('profile-betahaus.emaillogin:exdended')
    
Uninstall profile
------------------

For the theory, see
`<http://plone.org/documentation/kb/genericsetup/creating-an-uninstall-profile>`_

For an example, see the `collective.pdfpeek source code
<http://svn.plone.org/svn/collective/collective.pdfpeek/trunk/collective/pdfpeek/profiles/>`_.    

Dependencies
------------

GenericSetup profile can contain dependencies to other product profiles (and installers).

* `More information about GenericSetup dependencies <http://plone.org/products/plone/roadmap/195/>`_.

For example, if you want to declare dependency to *collective.basket* add-on product, so that it
is automatically installed when your add-on installed you can use the declaration below.
This way, you can be sure that all layers, portlets, etc. features which require database changes
are usable from *collective.basket* add-on products when your add-on product is run.

.. code-block:: xml

        <?xml version="1.0"?>
        <metadata>
          <!-- We do not declare <version> here because Plone 3.3+ picks the version from setup.py file -->
          <dependencies>
            <dependency>profile-collective.basket:default</dependency>
          </dependencies>
        </metadata>

*collective.basket* declares the profile in its configure.zcml:

.. code-block:: xml

    <genericsetup:registerProfile
              name="default"
              title="collective.basket"
              directory="profiles/default"
              description='Collector portlet framework'
              provides="Products.GenericSetup.interfaces.EXTENSION"
              />
 

.. note ::

        You might need to restart Plone if you edit metadata.xml - some information might be cached
        preventing immediate effect of changes.

Upgrade steps
-------------

You can define upgrade steps to run code only when someone upgrades your
product from version *x* to *y*.

As an example, let's say that the new version 1.2 of YOUR.PRODUCT defines a
*price* field on a content type *MyType* to be a string, but previously
(version 1.1.  and earlier) it was a float. Code that uses this field and
assumes it to be a float will break after the upgrade, so you'd like to
automatically convert existing values for the field to string. 

(Obviously, you could do this very quickly in a simple script, but having a
GenericSetup upgrade step means non-technical people can do it as well. As it
turns out, once you have the script, it's easy to put its code in an upgrade
step.)

We add the upgrade step to the profile::

  <genericsetup:upgradeStep
      title="Convert Price to strings"
      description="Price was previously a float field, it should be converted to string"
      source="*"
      destination="1.2"
      handler="YOUR.PRODUCT.setuphandlers.convert_price_to_string"
      sortkey="1"
      profile="YOUR.PRODUCT:default" 
      />

* You can use a wildcard character for *source* to indicate an upgrade for any
  previous version. To run the upgrade step only when upgrading from a specific
  version, use that version's number.

* The *sortkey* can be used to indicate the order in which upgrade steps are
  run.

The code for the upgrade method itself is best placed in *setuphandlers.py*::

    def convert_price_to_string(context, logger=None):
        """Method to convert float Price fields to string.

        When called from the import_various method, 'context' is
        the plone site and 'logger' is the portal_setup logger. 

        But this method will be used as upgrade step, in which case 'context' 
        will be portal_setup and 'logger' will be None.
        
        """
        if logger is None:
            # Called as upgrade step: define our own logger.
            logger = logging.getLogger('YOUR.PRODUCT')

        # Run the catalog.xml step as that may have defined new metadata
        # columns.  We could instead add <depends name="catalog"/> to
        # the registration of our import step in zcml, but doing it in
        # code makes this method usable as upgrade step as well.
        # Remove these lines when you have no catalog.xml file.
        setup = getToolByName(context, 'portal_setup')
        setup.runImportStepFromProfile(PROFILE_ID, 'catalog')

        catalog = getToolByName(context, 'portal_catalog')
        brains = catalog(portal_type='MyType')
        count = 0
        for brain in brains:
            current_price = brain.getPrice
            if type(current_price) != type('a string'):
                voorstelling = brain.getObject()
                voorstelling.setPrice(str(current_price))
                voorstelling.reindexObject()
                count = count + 1
            
        setup.runImportStepFromProfile(PROFILE_ID, 'catalog')
        logger.info("%s fields converted." % count)

After restarting Zope, your upgrade step should be visible in the ZMI: The
*portal_setup* tool has a tab *Upgrades*. Select your product profile to see
which upgrade steps Zope knows about for your product.

Add-on product appears twice in the installer list
---------------------------------------------------

This happens if you are developing your own add-on and keep changing things.
You have an error in your add-on product ZCML code which causes
portal_quickinstaller to have two entries.

More information

* http://plone.293351.n2.nabble.com/Product-twice-in-quickinstaller-td5345492.html#a5345492
