==========
Querying
=========

Quering is action to retrieve data from search indexes.

Preface
-------

**Warning**: Usually if you pass in None as the match value it will match all objects instead of zero objects.

Plone queries are performed using portal_catalog tool. Calling this class instance is a shortcut
to query method itself, but it is also possible to use other query functions::

	# portal_catalog is defined in the site root
	portal_catalog = site.portal_catalog

	# The following call does not return the actual objects,
	# but brains instead
	# The call takes list of indices and match values as arguments
	brains = portal_catalog(Title="Get all objects with Title "Foobar")

Brain objects
-------------

portal_catalog queries return iterable of catalog brain objects.

Brains contain subset of the actual content object information. Available subset is defined
by metadata columns in portal_catalog.

You can access the brain object information by following::

	# Return arbitary metadata field by metadata field name
	title = brain["Title"]

	# Return object absolute_url()
	url = brain.getURL()

	# Load the actual object from the database (SLOW!)
	object = brain.getObject()


Dumping portal catalog content
------------------------------

Following is useful in unit test debugging::

	# Print all objects visible to the currently logged in user
	for i in portal_catalog(): print i.getURL()

** Security warning**: Respects priviledges of the current user

Bypassing query security check
------------------------------

** Security warning**: All portal_catalog queries are limited to the current user permissions by default.

If you want to bypass this restrictions, use method unrestrictedSearchResults().

Example::

	# Print absolute content of portal_catalog
	for i in portal_catalog.unrestrictedSearchResults(): print i.getURL()

Querying by path
----------------

ExtendedPathIndex_ is the index used for content object paths.
Path index stores the physical path of the objects.

** Warning: ** If you ever rename your Plone site instance, path index needs to be rebuild.

Example::

	portal_catalog(path={ query: "/myploneinstance/myfolder" }) # return myfolder and all child content

Querying by interface
---------------------

See `this tutorial <http://plone.org/documentation/how-to/query-portal_catalog-for-interfaces>`_.


Querying by date
----------------

See `DateIndex <http://svn.zope.org/Zope/trunk/src/Products/PluginIndexes/DateIndex/tests/test_DateIndex.py?rev=102443&view=auto>`_.

Example::

	items = portal_catalog(effective_date = {'date': {'query':(DateTime('2002-05-08 15:16:17'),
                                            DateTime('2062-05-08 15:16:17')),
                                   'range': 'min:max'})

Another example how to get news items for a particular year in the template code::

	<div metal:fill-slot="main" id="content-news"
     tal:define="boundLanguages here/portal_languages/getLanguageBindings;
                 prefLang python:boundLanguages[0];
                 DateTime python:modules['DateTime'].DateTime;
                 start_year request/year| python: 2004;
                 end_year request/year| python: 2099;
                 start_year python: int(start_year);
                 end_year python: int(end_year);
     			 results python:container.portal_catalog(
     			 	portal_type='News Item',
     			 	sort_on='Date',
     			 	sort_order='reverse',
     			 	review_state='published',
     			 	id=prefLang,
     			 	created={ 'query' : [DateTime(start_year,1,1), DateTime(end_year,12,31)], 'range':'minmax'}
     			 	);
                 results python:[r for r in results if r.getObject()];
                 Batch python:modules['Products.CMFPlone'].Batch;
                 b_start python:request.get('b_start',0);
                 portal_discussion nocall:here/portal_discussion;
                 isDiscussionAllowedFor nocall:portal_discussion/isDiscussionAllowedFor;
                 getDiscussionFor nocall:portal_discussion/getDiscussionFor;
                 home_url python: mtool.getHomeUrl;
                 localized_time python: modules['Products.CMFPlone.PloneUtilities'].localized_time;">
    	...
    </div>

Combining queries using Boolean operators
-----------------------------------------

See AdvancedQuery_.

Example::

        from Products import AdvancedQuery

        portal_catalog = self.portal_catalog # Acquire portal_catalog from higher hierarchy level

        path = self.getPhysicalPath() # Limit the search to the current folder and its children

        # object.getPhysicalPath() returns the path as tuples of path parts
        # Convert path to string
        path = "/".join(path)

        # Limit search to path in the current contex object and
        # match all children implementing either of two interfaces
        # AdvancedQuery operations can be combined using Python expressions & | and ~
        # or AdvancedQuery objects
        query = AdvancedQuery.Eq("path", path) & (AdvancedQuery.Eq("getMyIndexGetter1", "foo") | AdvancedQuery.Eq("getMyIndexGetter2", "bar"))

        # The following result variable contains iterable of CatalogBrain objects
        results = portal_catalog.evalAdvancedQuery(query)

        # Convert the catalog brains to a Python list containing tuples of object unique ID and Title
        pairs = []
        for nc in results:
            pairs.append((nc["UID"], nc["Title"]))


# query = Eq("path", diagnose_path) & Eq("SearchableText", text_query_target)

	query = Eq("path", diagnose_path) & Eq("SearchableText", text_query_target)

	return self.context.portal_catalog.evalAdvancedQuery(query)


.. _AdvancedQuery: http://www.dieter.handshake.de/pyprojects/zope/AdvancedQuery.html

.. _ExtendedPathIndex: https://svn.plone.org/svn/plone/Products.ExtendedPathIndex/trunk/README.txt

.. _PluginxIndexes: http://svn.zope.org/Zope/trunk/src/Products/PluginIndexes/