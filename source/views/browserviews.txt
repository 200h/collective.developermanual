===============
 Browser views
===============

BrowserView classes are a combination of Python object-oriented class code and
page template to produce a HTML page. By keeping as much of the logic code
in a separate Python class and making page template as dump as possible
the code readability and reuse is achieved.

`Read Zope view tutorial <http://plone.org/documentation/tutorial/borg/zope-3-views>`_.

Creating a view
---------------

Example::

	# We must use BrowserView from view, not from zope.browser
	# Zope version does not
	from Products.Five.browser import BrowserView

	class MyView(BrowserView):

		def __init__(self, context, request):
			self.context = context
			self.requet = request

		# by default call will call self.index() method which is mapped
		# to ViewPageTemplateFile specified in ZCML
		#def __call__():
		#

See also `BrowserView source code <http://svn.zope.org/zope.publisher/trunk/src/zope/publisher/browser.py?rev=101538&view=auto>`_.
and `Five version (one with acquisition support) <http://svn.zope.org/Zope/trunk/src/Products/Five/browser/__init__.py?rev=96262&view=markup>`_.

Relationship between views and templates
----------------------------------------

ZCML <browser:view template=""> will override class index value.

Eaxmple::
	
	<browser:page
		for="*"
		name="test"
        permission="zope2.Public"
        class=".views.MyView"        
        />    
	
	from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile

	class MyView(BrowserView):
	
		index = ViewPageTemplateFile("my-template.pt") 


is equal to::

	<browser:page
		for="*"
		name="test"
        permission="zope2.Public"
        class=".views.MyView"
        template="my-template.pt"        
        />   

	class MyView(BrowserView):
		pass
		
Rendering of the view is done by following:

	class MyView(BrowserView):
		
		# This may be overridden in ZCML
		index = ViewPageTemplateFile("my-template.pt")
	
		def render(self):
			return self.index()
	
		def __call__(self):
			return self.render()

Getting a view by id
--------------------

Below is an example how to resolve a view for any contentish object
using traverse. View is also put into acquisition chain using __of__()
method (necessary for rendering Plone templates).

Example::

	def getView(context, name):
	    """ Return a view which is associated with context object and current HTTP request.

		@param context: Any Plone content object
	    @param name: Attribute name holding the view name
	    """


	    try:
	        view = context.unrestrictedTraverse("@@" + name)
	    except AttributeError:
	        raise RuntimeError("Instance %s did not have view %s" % (str(context), name))

	    view = view.__of__(context)

	    return view
	    
Zope 2 views vs. Zope 3 views
------------------------------

TODO	    