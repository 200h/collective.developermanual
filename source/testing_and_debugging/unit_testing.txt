=================
 Unit testing
=================

Unit tests are automated tests created by developer to ensure that the add-on product is
intact in the current product configuration. Unit tests are regression tests and
are designed to catch broken functionality over the code evolution.

`Plone unit testing tutorial <http://plone.org/documentation/tutorial/richdocument/unit-testing>`_.

Running add-on installers and extensions profiles for unit tests
-----------------------------------------------------------------

By default, no add-on installers or extension profiles are installed.

You need to modify PloneTestCase.setupPloneSite() call in your 
base unit tests.

Simple example::

    ptc.setupPloneSite(products=['namespace.yourproduct'])

Complex example::

    ptc.setupPloneSite(products=['harvinaiset.app', 'TickingMachine'], extension_profiles=["harvinaiset.app:tests","harvinaiset.app:default"])
    
Setting log level in unit tests
-------------------------------

Many components use debug output level and unit testing default output level is info.
Import messages may go unnoticed during the unit test development.

Add this to your unit test code:

    def enableDebugLog(self):
        """ Enable context.plone_log() output from Python scripts """
        import sys, logging        
        from Products.CMFPlone.log import logger    
        logger.root.setLevel(logging.DEBUG)
        logger.root.addHandler(logging.StreamHandler(sys.stdout))        
        
  