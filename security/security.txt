Sandboxing
----------

Plone has two modes of traversing and code execution

* Unrestricted: Python code is executed normally and the code can access the full Zope application server environment. This includes other site instances too.

* Restricted: Traversing and function calls go through AccessControl_ / RestrictedPython_ / zope.security checks.  and 
  Every function call and attribute access is evaluated against ClassSecurityInfo_ and ModuleSecurityInfo_.

Restricted execution is enabled:

* When incoming HTTP requests are traversed (everything you can type to your browser address bar)

* Page templates: everything you put in tal:content, tal:condition, etc.

* Script (Python) code is executed (plone_skins layer Python scripts and old style form management)

Restricted execution has some performance penalty.

Restricted execution special cases
==================================

Zope traversing mechanism does not expose 

* Functions without docstring (the """ comment at the beginning of the function)

* Functions whose name begins with underscore ("_"-character)

Old style vs. new style
-----------------------

Try to avoid old style (Zope 2) techniques in new code:

* ClassSecurityInfo_

* ModuleSecurityInfo_

* security.declareProtected() / security.declarePublic() declarations

* Script (Python) snippets

Instead, use Zope 3 techniques:

* Expose data through View and BrowserView instances

* Put Security declarations in ZCML file

Bypassing permission checks
---------------------------

The current user is defined by active security manager. In both restricted and unrestricted execution certain functions may do their own security checks (invokeFactory, workflow, search)
to filter out results. If function does its own security check, there usually exist a version without security check.

Example:

* context.restrictedTraverse() vs. context.unrestrictedTraverse()

* portal_catalog.searchResults() vs. portal_catalog.unrestrictedSearchResults()

To bypass the security checks do the following::

**This is not a recommended practice in product code. Use only for testing**

    from AccessControl import ClassSecurityInfo, getSecurityManager
    from AccessControl.SecurityManagement import newSecurityManager, setSecurityManager
    from AccessControl.User import nobody

    sm = getSecurityManager()
    try:
        user = sm.getUser()
        try:
            newSecurityManager(None, nobody)

            # Do priviledged code here            
            callMyCode()
        except:
            # If special exception handlers are needed, run them here
            raise
    finally:
        setSecurityManager(sm)        

Declaring view security
-----------------------

<browser:page> takes in an attribute permission.

See `browser:page reference <http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/page/index.html>`_.

Example::

        <!-- permission comes from -->
        
        <browser:page
                for="getpaid.core.interfaces.IStore"
                name="null_payment_button"
                class=".button.NullPaymentButton"
                permission="zope2.View"
                template="templates/button.pt"
                />


For available ZCML permission mappings see

* `Products.Five / permissions.zcml <http://svn.zope.org/Zope/trunk/src/Products/Five/permissions.zcml?rev=99146&view=markup>`_

* `zope.security / permissions.zcml <http://svn.zope.org/zope.security/trunk/src/zope/security/permissions.zcml?rev=97988&view=markup>`_

...or search string "<permission" in *.zcml files in your codebase.

Available permissions
---------------------

Each permission name is a string. 

To see available permissions, click Security tab at your site root in Zope Management Interface.

In programming, use pseudoconstants instead of permission string values:

* See `CMFCore.permissions <http://svn.zope.org/Products.CMFCore/trunk/Products/CMFCore/permissions.py?rev=94487&view=markup>`_ 

* See `AccessControl.Permissions <http://svn.zope.org/Zope/trunk/src/AccessControl/Permissions.py?rev=96262&view=markup>`_

Other references
----------------

* `zope.security <http://pypi.python.org/pypi/zope.security>`_

.. _AccessControl: http://svn.zope.org/Zope/trunk/src/AccessControl

.. _RestrictedPython: http://pypi.python.org/pypi/RestrictedPython>

.. _ClassSecurityInfo: http://svn.zope.org/Zope/trunk/src/AccessControl/SecurityInfo.py?rev=96262&view=markup

-- _ModuleSecurityInfo: http://svn.zope.org/Zope/trunk/src/AccessControl/SecurityInfo.py?rev=96262&view=markup
